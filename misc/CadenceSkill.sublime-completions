{
	"scope": "source.skill - support.constant.skill,meta.delimiter.method.period.skill",
	"completions":
	[
		"abs",
		"acos",
		"acosh",
		"add1",
		"addConstructor",
		"addDefstructClass",
		"addDestructor",
		"then",
		"addToNameSpace",
		"alias",
		"allocDebug",
		"allocate",
		"alphaNumCmp",
		"alphalessp",
		"and",
		"andmap",
		"append",
		"append1",
		"apply",
		"argc",
		"arglist",
		"argv",
		"arrayp",
		"arrayref",
		"asin",
		"asinh",
		"assoc",
		"assq",
		"assv",
		"atan",
		"atan2",
		"atanh",
		"atof",
		"atoi",
		"atom",
		"band",
		"bcdp",
		"begin",
		"bindStringArgs",
		"bitfield",
		"bitfield1",
		"blankstrp",
		"bnand",
		"bnor",
		"bnot",
		"boolean?",
		"booleanp",
		"bor",
		"boundp",
		"break",
		"breakHandler",
		"breakpt",
		"buildString",
		"bxnor",
		"bxor",
		"callAs",
		"callInitProc",
		"callNextMethod",
		"callUserInitProc",
		"call_cc",
		"case",
		"caseq",
		"cdsGetInstPath",
		"ceiling",
		"cfiCatch",
		"cfiThrow",
		"cfiUnwindProtect",
		"changeWorkingDir",
		"charToInt",
		"className",
		"classOf",
		"classSuper",
		"classp",
		"clear",
		"clearDefstruct",
		"clearExitProcs",
		"clearFnWriteProtect",
		"close",
		"compareTime",
		"compress",
		"concat",
		"cond",
		"cons",
		"cons*",
		"constar",
		"cont",
		"continue",
		"continue2",
		"copy",
		"copyAllDefstructs",
		"copyDefstructDeep",
		"copyStructDeep",
		"copy__tm_",
		"cos",
		"cosh",
		"count",
		"cprintf",
		"cputime",
		"cqTestcov",
		"createDir",
		"csh",
		"ctoplevel",
		"dbx",
		"debug",
		"debugErrorHandler",
		"debugErrorHandler",
		"debugQuit",
		"debugStatus",
		"debugger",
		"declare",
		"declareLambda",
		"declareNLambda",
		"declareSQNLambda",
		"decode",
		"def",
		"defCapDepends",
		"defCapPrefixes",
		"defGroup",
		"defInitProc",
		"defMathConstants",
		"defPrereq",
		"defUserInitProc",
		"defgeneric",
		"define",
		"define_syntax",
		"defmacro",
		"defmethod",
		"defprop",
		"defstruct",
		"defstructp",
		"defsyntax",
		"defvar",
		"delFromNameSpace",
		"deleteDir",
		"deleteFile",
		"describe",
		"difference",
		"disableResume",
		"display",
		"do",
		"drain",
		"dtpr",
		"dump",
		"duplicate_symbols",
		"echo",
		"ed",
		"edi",
		"edit",
		"editFile",
		"editFunction",
		"editLoad",
		"editVariable",
		"else",
		"edl",
		"enableResume",
		"encrypt",
		"env",
		"envobj",
		"eq",
		"eq?",
		"equal",
		"equal?",
		"eqv",
		"eqv?",
		"err",
		"error",
		"errset",
		"errset_s",
		"errsetstring",
		"errsetstring_s",
		"euEndIgnoredFnMessages",
		"euInitIgnoredFnMessages",
		"euRepAddPriority",
		"euRepAuthorise",
		"euRepAuthorised",
		"euRepCausesFail",
		"euRepClassNames",
		"euRepCloseLogFile",
		"euRepCompLists",
		"euRepCreateNewIgnoreForm",
		"euRepDisable",
		"euRepDisplayIgnoreForm",
		"euRepFinish",
		"euRepGetCount",
		"euRepGetFormatString",
		"euRepGetGroup",
		"euRepGetLogFile",
		"euRepGetStatus",
		"euRepGroupCB",
		"euRepIDNames",
		"euRepIgnore",
		"euRepIgnoreFormCallback",
		"euRepIgnored",
		"euRepIncCount",
		"euRepInitDB",
		"euRepIntAuthorised",
		"euRepIntCheckPriority",
		"euRepIntGetMessage",
		"euRepIntPriorityTranslate",
		"euRepIntSuppressed",
		"euRepMoveSelected",
		"euRepOpenLogFile",
		"euRepPPMessages",
		"euRepPopDB",
		"euRepPrintAuthorised",
		"euRepPrintIgnored",
		"euRepPrintScreen",
		"euRepPrintSuppressed",
		"euRepPushDB",
		"euRepRegister",
		"euRepRegisterInt",
		"euRepRegisterList",
		"euRepReport",
		"euRepReportU",
		"euRepSetStatus",
		"euRepSortMess",
		"euRepStart",
		"euRepSuppress",
		"euRepSuppressed",
		"euRepUnauthorise",
		"euRepUnignore",
		"euRepUnsuppress",
		"eval",
		"evalalias",
		"evalstring",
		"even?",
		"evenp",
		"exists",
		"exit",
		"exp",
		"expand1",
		"expandMacro",
		"expt",
		"fatal",
		"fboundp",
		"fdoc",
		"fileLength",
		"fileSeek",
		"fileTell",
		"fileTimeModified",
		"findClass",
		"fix",
		"fixp",
		"float",
		"floatp",
		"floor",
		"for",
		"for_each",
		"forall",
		"fprintf",
		"fscanf",
		"funcall",
		"function",
		"funobj",
		"gc",
		"gcstats",
		"gcsummary",
		"gensym",
		"geqp",
		"get",
		"getAllLoadedFiles",
		"getCallingFunction",
		"getCapDepends",
		"getCapPrefixes",
		"getCurrentTime",
		"getDepends",
		"getDirFiles",
		"getFnReadProtect",
		"getFnWriteProtect",
		"getFunType",
		"getFunctions",
		"getInstallPath",
		"getLoadByte",
		"getLoadFile",
		"getLoadLine",
		"getLogin",
		"getPrompts",
		"getSGq",
		"getShellArgs",
		"getShellEnvVar",
		"getSkillPath",
		"getSkillVersion",
		"getSystemName",
		"getTempDir",
		"getVarWriteProtect",
		"getVersion",
		"getWarn",
		"getWorkingDir",
		"get_filename",
		"get_pname",
		"get_string",
		"getc",
		"getchar",
		"getd",
		"getdisc",
		"getl",
		"getmethod",
		"getq",
		"getqq",
		"gets",
		"go",
		"greaterp",
		"help",
		"hprof",
		"hprofSetFileName",
		"ilAllocDebug",
		"ilAllocStats",
		"ilAutoStacktraceCB",
		"ilBreakForm",
		"ilBreakFormCB",
		"ilBuildBreakForm",
		"ilBuildDebugToolBoxForm",
		"ilBuildProfileFixedMenu",
		"ilBuildProfileMenus",
		"ilBuildProfilePulldown1",
		"ilBuildProfilePulldown2",
		"ilBuildProfileWindow",
		"ilBuildToolBoxForm",
		"ilBuildTraceForm",
		"ilCheck",
		"ilContinueCB",
		"ilCreateToolBox",
		"ilCreateToolBoxMenu",
		"ilDebugCheckFunction",
		"ilDebugQuitCB",
		"ilDebugResetForms",
		"ilDebugToolBox",
		"ilDebugViewMenu",
		"ilDisplayView",
		"ilDumpCB",
		"ilDumpCFuncs",
		"ilDumpPages",
		"ilEditFileErrHandler",
		"ilEval",
		"ilGetDeepestAlias",
		"ilGetDefiningCapForFn",
		"ilGetDefiningCapForVar",
		"ilGetTemplate",
		"ilInstallDebuggerCB",
		"ilIsDebuggerInstalled",
		"ilIsOpusRunning",
		"ilNextCB",
		"ilPrintTCov",
		"ilProfBuildFilterForm",
		"ilProfBuildHProfForm",
		"ilProfBuildSetupForm",
		"ilProfBuldFileMenu",
		"ilProfCloseWindowCB",
		"ilProfCodeBrowserCB",
		"ilProfDisplayHProf",
		"ilProfDisplayHelp",
		"ilProfDisplaySummary",
		"ilProfFilterCB",
		"ilProfFilterFormCB",
		"ilProfGetHProfFileCB",
		"ilProfInitIcons",
		"ilProfResetCB",
		"ilProfSetupCB",
		"ilProfStartCB",
		"ilProfStartMemoryMenuCB",
		"ilProfStartTimeMenuCB",
		"ilProfStopCB",
		"ilProfSwitchSortCB",
		"ilProfType",
		"ilProfUpdateStatus",
		"ilProfWindow",
		"ilProfileViewFile",
		"ilProfileViewFunction",
		"ilProfileViewFunctionCB",
		"ilSetErrorCompat",
		"ilStacktraceCB",
		"ilStepCB",
		"ilStepoutCB",
		"ilTCovInit",
		"ilToolBox",
		"ilToolBoxCheckin",
		"ilTraceCB",
		"ilTraceEditCB",
		"ilTraceForm",
		"ilTraceNoEditCB",
		"ilViewBuildFileMenu",
		"ilWhereCB",
		"iliAddReader",
		"iliAddWriter",
		"iliBldClassDefaultMethods",
		"iliBldSlotAccessors",
		"iliBuildCopier",
		"iliBuildMaker",
		"iliBuildMaster",
		"iliCheckClassArgs",
		"iliClearCStackTop",
		"iliConstructApplyArgs",
		"iliConstructArgsFromOptions",
		"iliCopyDefstruct",
		"iliDebugOnErrorCB",
		"iliDebugOnErrorp",
		"iliDefineDefaultReader",
		"iliDefineDefaultWriter",
		"iliDefineReaderGeneric",
		"iliDefineWriterGeneric",
		"iliDefstruct",
		"iliEdit",
		"iliEnsureClass",
		"iliEnsureGeneric",
		"iliEnsureMethod",
		"iliFinalizeSlotSpec",
		"iliFinalizeSuperSlots",
		"iliGenSkillDataPath",
		"iliGetAllCapabilities",
		"iliGetAllSuperclasses",
		"iliGetDebugLine",
		"iliGetDirFiles",
		"iliGetSuperClassSlots",
		"iliListFunctions",
		"iliLoadTmpFile",
		"iliMakeDefstruct",
		"iliNoDuplicates",
		"iliPrintVal",
		"iliProcessClassOptions",
		"iliProcessClassSlots",
		"iliProcessSuperclasses",
		"iliSetDebugPortLine",
		"iliTerminateDebuggerCB",
		"iliWriteFormToFile",
		"importSkillVar",
		"inScheme",
		"inSkill",
		"include",
		"includePort",
		"index",
		"infile",
		"info",
		"inportp",
		"installDebugger",
		"instring",
		"intToChar",
		"integer?",
		"integerp",
		"intern",
		"ipcActivateBatch",
		"ipcActivateMessages",
		"ipcBatchProcess",
		"ipcBeginProcess",
		"ipcCheck",
		"ipcCloseProcess",
		"ipcContProcess",
		"ipcGetExitStatus",
		"ipcGetPid",
		"ipcGetPriority",
		"ipcGetProcessPid",
		"ipcIPCDebug",
		"ipcIsActiveProcess",
		"ipcIsAliveProcess",
		"ipcKillAllProcesses",
		"ipcKillProcess",
		"ipcReadProcess",
		"ipcSetPriority",
		"ipcSkillProcess",
		"ipcSleep",
		"ipcSoftInterrupt",
		"ipcStopProcess",
		"ipcWait",
		"ipcWaitForProcess",
		"ipcWriteProcess",
		"isCallable",
		"isClass",
		"isContextLoaded",
		"isDir",
		"isExecutable",
		"isFile",
		"isFileEncrypted",
		"isFileName",
		"isGeneric",
		"isInfinity",
		"isLargeFile",
		"isLink",
		"isMacro",
		"isNaN",
		"isNameSpaceMember",
		"isReadable",
		"isSkillDev",
		"isWritable",
		"lambda",
		"lambda_rules",
		"last",
		"lbsDefaultQueueGet",
		"lbsFilterJobsGet",
		"lbsIsInitialized",
		"lbsJobBeginTimeLimitGet",
		"lbsJobCmdNameGet",
		"lbsJobDependencyGet",
		"lbsJobDispatchTimeGet",
		"lbsJobErrFileGet",
		"lbsJobExeHostGet",
		"lbsJobHomeDirGet",
		"lbsJobInFileGet",
		"lbsJobIsValid",
		"lbsJobJobNameGet",
		"lbsJobKill",
		"lbsJobLoginShellGet",
		"lbsJobMailUserGet",
		"lbsJobOutFileGet",
		"lbsJobQueueNameGet",
		"lbsJobResume",
		"lbsJobStateGet",
		"lbsJobSubHostGet",
		"lbsJobSubmit",
		"lbsJobSubmitTimeGet",
		"lbsJobSubmitterGet",
		"lbsJobSuspend",
		"lbsJobTermTimeGet",
		"lbsJobTermTimeLimitGet",
		"lbsJobWait",
		"lbsJobWorkDirGet",
		"lbsMasterHostGet",
		"lbsPanicCallbackSet",
		"lbsQueueHostListGet",
		"lbsQueueListGet",
		"lbssConfigChgCallbackSet",
		"lbssDefaultQueueGet",
		"lbssExit",
		"lbssFilterJobsGet",
		"lbssIsInitialized",
		"lbssJobBeginTimeLimitGet",
		"lbssJobCmdNameGet",
		"lbssJobDependencyGet",
		"lbssJobDispatchTimeGet",
		"lbssJobErrFileGet",
		"lbssJobExeHostGet",
		"lbssJobHomeDirGet",
		"lbssJobInFileGet",
		"lbssJobInterrupt",
		"lbssJobIsValid",
		"lbssJobJobNameGet",
		"lbssJobKill",
		"lbssJobLoginShellGet",
		"lbssJobMailUserGet",
		"lbssJobOutFileGet",
		"lbssJobQueueNameGet",
		"lbssJobReadyWait",
		"lbssJobResume",
		"lbssJobStateGet",
		"lbssJobSubHostGet",
		"lbssJobSubmit",
		"lbssJobSubmitTimeGet",
		"lbssJobSubmitterGet",
		"lbssJobSuspend",
		"lbssJobTermTimeGet",
		"lbssJobTermTimeLimitGet",
		"lbssJobWait",
		"lbssJobWorkDirGet",
		"lbssJobWrite",
		"lbssMasterHostGet",
		"lbssPanicCallbackSet",
		"lbssQueueHostListGet",
		"lbssQueueListGet",
		"lconc",
		"ldiff",
		"lds",
		"leftshift",
		"length",
		"leqp",
		"lessp",
		"let",
		"let*",
		"letrec",
		"letseq",
		"lineread",
		"linereadstring",
		"list",
		"list?",
		"listFunctions",
		"listToVector",
		"listVariables",
		"listp",
		"load",
		"loadContext",
		"loadfile",
		"loadi",
		"loadstring",
		"log",
		"log10",
		"lookupPartialTag",
		"lookupTag",
		"loop_pbs",
		"lowerCase",
		"lsh",
		"macro",
		"makeCapContext",
		"makeInstance",
		"makeNameSpace",
		"makeNamedVector",
		"makeSymbol",
		"makeTable",
		"makeTempFileName",
		"makeTempPort",
		"makeVector",
		"make__tm_",
		"make_lambda_rules",
		"make_syntax_rules",
		"map",
		"mapc",
		"mapcan",
		"mapcar",
		"maplist",
		"max",
		"measureTime",
		"member",
		"memberOf",
		"memq",
		"memv",
		"mergesort",
		"meter",
		"min",
		"minus",
		"minusp",
		"mod",
		"modulo",
		"mprocedure",
		"mpsBGet",
		"mpsBadResult",
		"mpsCheck",
		"mpsClose",
		"mpsDPut",
		"mpsDebug",
		"mpsDefaultSessionHost",
		"mpsDefaultSessionName",
		"mpsEncap",
		"mpsEncap_s",
		"mpsExit",
		"mpsExport",
		"mpsFlush",
		"mpsFlushMsgs",
		"mpsGet",
		"mpsGetAll",
		"mpsGetErrString",
		"mpsImport",
		"mpsImportWithCheck",
		"mpsIsExported",
		"mpsMakePattern",
		"mpsMakeTemplate",
		"mpsNextEvent",
		"mpsNextEventT",
		"mpsNotifyOnExport",
		"mpsPPut",
		"mpsPut",
		"mpsRead",
		"mpsReadAll",
		"mpsRegInterest",
		"mpsRemoteApply",
		"mpsRemove",
		"mpsRemoveAll",
		"mpsSend",
		"mpsSleep",
		"mpsUnregInterest",
		"mpsUnregTemplateID",
		"mpsc",
		"mpsca",
		"mpscat",
		"mpsct",
		"mpscx",
		"msgDisplayDisinterest",
		"msgDisplayInterest",
		"msgDisplayNotify",
		"msgEditDisinterest",
		"msgEditFileDisinterest",
		"msgEditFileInterest",
		"msgEditFileNotify",
		"msgEditInterest",
		"msgEditNotify",
		"msgHiliteDisinterest",
		"msgHiliteInterest",
		"msgHiliteNotify",
		"msgInit",
		"msgSelectDisinterest",
		"msgSelectInterest",
		"msgSelectNotify",
		"msgmGetFuncList",
		"msgmGetRepresentation",
		"msgpCheckEditFileObj",
		"msgpCheckEditObj",
		"msgpCheckHiliteObj",
		"msgpCheckSelectObj",
		"msgpDisplayCbk",
		"msgpEditCbk",
		"msgpEditFileCbk",
		"msgpEditNotify",
		"msgpEditOrDisplayCbk",
		"msgpGenericCbk",
		"msgpGenericDisinterest",
		"msgpGenericInterest",
		"msgpHiliteCbk",
		"msgpSelectCbk",
		"nconc",
		"ncons",
		"needNCells",
		"negative?",
		"negativep",
		"neq",
		"nequal",
		"newline",
		"next",
		"next2",
		"nextMethodp",
		"nindex",
		"nlambda",
		"not",
		"nprocedure",
		"nth",
		"nthcdr",
		"nthelem",
		"null",
		"null?",
		"numOpenFiles",
		"numberp",
		"odd?",
		"oddp",
		"onep",
		"openportp",
		"or",
		"otherp",
		"outfile",
		"outportp",
		"pair?",
		"pairp",
		"parseString",
		"pb_access",
		"pb_control",
		"pb_name",
		"pcreCompile",
		"pcreExecute",
		"pcreExtractMatch",
		"pcreMagic",
		"pcreMatchAssocList",
		"pcreMatchList",
		"pcreMatchp",
		"pcreReplace",
		"pcreSubstitute",
		"peekc",
		"plist",
		"plus",
		"plusp",
		"pop",
		"popErrorHandler",
		"portp",
		"postdecrement",
		"postincrement",
		"pp",
		"ppfunction",
		"ppnewline",
		"pprint",
		"pprof",
		"predecrement",
		"preincrement",
		"prependInstallPath",
		"print",
		"printBlend",
		"printError",
		"printFileDescriptors",
		"printFunctions",
		"printObject",
		"printStack",
		"printVariables",
		"printf",
		"printlev",
		"println",
		"printstring",
		"printstruct",
		"probef",
		"procedurep",
		"profile",
		"profileReset",
		"profileSummary",
		"prog1",
		"prog2",
		"progError",
		"progn",
		"push",
		"pushErrorHandler",
		"putd",
		"putprop",
		"putpropq",
		"putpropqq",
		"quote",
		"quotient",
		"random",
		"range",
		"read",
		"readTable",
		"readstring",
		"real?",
		"realp",
		"regAfterCall",
		"regBeforeCall",
		"regExitAfter",
		"regExitBefore",
		"remExitProc",
		"remainder",
		"remd",
		"remdq",
		"remove",
		"remprop",
		"remq",
		"renameFile",
		"reset",
		"resetAllSafeEval",
		"resetCallBack",
		"resetNotSafeEval",
		"resetSafeEval",
		"resume",
		"return",
		"reverse",
		"rexCompile",
		"rexExecute",
		"rexExtractMatch",
		"rexMagic",
		"rexMatchAssocList",
		"rexMatchList",
		"rexMatchp",
		"rexReplace",
		"rexSubstitute",
		"rightshift",
		"rindex",
		"round",
		"rplaca",
		"rplacd",
		"saveContext",
		"scEval",
		"scanf",
		"schemeTopLevelEnv",
		"set",
		"set!",
		"setContext",
		"setDefaultCxtPath",
		"setDefaultSrcPath",
		"setFnWriteProtect",
		"setNotSafeEval",
		"setPrintDebug",
		"setPrintFile",
		"setPrintStack",
		"setPrompts",
		"setSGq",
		"setSafeEval",
		"setShellEnvVar",
		"setSkillPath",
		"setSlotValue",
		"setVarWriteProtect",
		"set_car",
		"set_cdr",
		"set_loop_pbs",
		"setarglist",
		"setarray",
		"setcar",
		"setcdr",
		"setfdoc",
		"setguard",
		"setof",
		"setplist",
		"setq",
		"setqbitfield",
		"setqbitfield1",
		"setvdoc",
		"sh",
		"shell",
		"signp",
		"simplifyFilename",
		"sin",
		"sinh",
		"skillCoreInit",
		"skillDebugger",
		"skillDevCheckout",
		"skillEval",
		"skillEvalString",
		"sklint",
		"sklint1",
		"sklintAll",
		"sklintAllInit",
		"sklintCtx",
		"sklintInteg",
		"sleep",
		"slotValue",
		"sort",
		"sortcar",
		"sprintf",
		"sqrt",
		"srandom",
		"sscanf",
		"sstatus",
		"stacktrace",
		"startFinder",
		"status",
		"stdobj",
		"step",
		"step2",
		"stepend",
		"stepout",
		"stepout2",
		"strcat",
		"strcmp",
		"stringToFunction",
		"stringToLower",
		"stringToSymbol",
		"stringToThunk",
		"stringToTime",
		"stringToUpper",
		"stringp",
		"strlen",
		"strncat",
		"strncmp",
		"sub1",
		"subclassesOf",
		"subclassp",
		"subst",
		"substring",
		"superclassesOf",
		"sxtd",
		"symbol?",
		"symbolToString",
		"symbolp",
		"symeval",
		"symstrp",
		"syntax_error",
		"syntax_match?",
		"syntax_rules",
		"system",
		"tableToList",
		"tablep",
		"tailp",
		"tan",
		"tanh",
		"tconc",
		"terpri",
		"theEnvironment",
		"timeToString",
		"timeToTm",
		"times",
		"tmToTime",
		"toplevel",
		"toplevelset",
		"toplevelsetstring",
		"trace",
		"tracef",
		"tracep",
		"tracev",
		"truncate",
		"type",
		"typep",
		"unalias",
		"unbreakpt",
		"uncount",
		"uninstallDebugger",
		"unless",
		"unmeter",
		"unprofile",
		"untrace",
		"untracep",
		"untracev",
		"upperCase",
		"usseCompFlags",
		"usseTraceFlags",
		"vdoc",
		"vector",
		"vector?",
		"vectorToList",
		"vectorp",
		"vi",
		"viewFn",
		"vii",
		"vil",
		"warn",
		"where",
		"whereIs",
		"which",
		"write",
		"writeTable",
		"xcons",
		"xdifference",
		"xplus",
		"xquotient",
		"xtimes",
		"zerop",
		"zxtd",
		"caaaar",
		"caaadr",
		"caaar",
		"caadar",
		"caaddr",
		"caadr",
		"caar",
		"cadaar",
		"cadadr",
		"cadar",
		"caddar",
		"cadddr",
		"caddr",
		"cadr",
		"car",
		"cdaaar",
		"cdaadr",
		"cdaar",
		"cdadar",
		"cdaddr",
		"cdadr",
		"cdar",
		"cddaar",
		"cddadr",
		"cddar",
		"cdddar",
		"cddddr",
		"cdddr",
		"cddr",
		"cdr",
		"puts",		
		//  Allegro Skill Function
		{ "trigger" : "axl_ol_ol2" , "contents" : "axl_ol_ol2(${1:l_seg1} ${2:l_seg2})" },
		{ "trigger" : "axlAddSelectAll" , "contents" : "axlAddSelectAll()" },
		{ "trigger" : "axlAddSelectBox" , "contents" : "axlAddSelectBox(${1:[l_bBox]})" },
		{ "trigger" : "axlAddSelectName" , "contents" : "axlAddSelectName(${1:t_nameType} ${2:l_names})" },
		{ "trigger" : "axlAddSelectObject" , "contents" : "axlAddSelectObject(${1:lo_dbid})" },
		{ "trigger" : "axlAddSelectPoint" , "contents" : "axlAddSelectPoint(${1:[l_point]})" },
		{ "trigger" : "axlAddSimpleMoveDynamics" , "contents" : "axlAddSimpleMoveDynamics(${1:l_origin} ${2:r_path} ${3:t_type} ${4:?ref_point} ${5:l_ref_point})" },
		{ "trigger" : "axlAddSimpleRbandDynamics" , "contents" : "axlAddSimpleRbandDynamics(${1:l_fixed_point} ${2:t_type} ${3:?origin} ${4:l_origin} ${5:?var_point} ${6:l_var_point} ${7:?lastPath} ${8:r_lastPath} ${9:?width} ${10:f_width} ${11:?color} ${12:g_color})" },
		{ "trigger" : "axlAirGap" , "contents" : "axlAirGap(${1:o_item1DBID} ${2:o_item2DBID} ${3:[t_layer]/nil} ${4:[s_mode]})" },
		{ "trigger" : "axlAutoOpenFindFilter" , "contents" : "axlAutoOpenFindFilter()" },
		{ "trigger" : "axlBackDrill" , "contents" : "axlBackDrill(${1:o_dbid} ${2:s_layer})" },
		{ "trigger" : "axlBondFingerDelete" , "contents" : "axlBondFingerDelete(${1:bondFingers} ${2:deleteWires})" },
		{ "trigger" : "axlBondWireDelete" , "contents" : "axlBondWireDelete(${1:bondWires} ${2:deleteFingers})" },
		{ "trigger" : "axlBuildClassPopup" , "contents" : "axlBuildClassPopup(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlBuildSubclassPopup" , "contents" : "axlBuildSubclassPopup(${1:r_form} ${2:t_field} ${3:t_class})" },
		{ "trigger" : "axlCancelEnterFun" , "contents" : "axlCancelEnterFun()" },
		{ "trigger" : "axlCancelOff" , "contents" : "axlCancelOff()" },
		{ "trigger" : "axlCancelOn" , "contents" : "axlCancelOn()" },
		{ "trigger" : "axlCancelTest" , "contents" : "axlCancelTest()" },
		{ "trigger" : "axlChangeNet" , "contents" : "axlChangeNet(${1:o_dbid} ${2:t_netName/o_netdbid})" },
		{ "trigger" : "axlChangeWidth" , "contents" : "axlChangeWidth(${1:lo_dbid/o_dbid} ${2:f_newWidth})" },
		{ "trigger" : "axlClearDynamics" , "contents" : "axlClearDynamics()" },
		{ "trigger" : "axlClearObjectCustomColor" , "contents" : "axlClearObjectCustomColor(${1:[lo_dbid]})" },
		{ "trigger" : "axlClearSelSet" , "contents" : "axlClearSelSet()" },
		{ "trigger" : "axlCloseFindFilter" , "contents" : "axlCloseFindFilter()" },
		{ "trigger" : "axlCmdList" , "contents" : "axlCmdList()" },
		{ "trigger" : "axlCmdRegister" , "contents" : "axlCmdRegister(${1:t_allegroCmd} ${2:ts_callback} ${3:?cmdType} ${4:t_cmdType} ${5:?doneCmd} ${6:ts_doneCmd} ${7:?cancelCmd} ${8:ts_cancelCmd})" },
		{ "trigger" : "axlCmdUnregister" , "contents" : "axlCmdUnregister(${1:t_allegroCmd})" },
		{ "trigger" : "axlCnsAddVia" , "contents" : "axlCnsAddVia(${1:t_csetName} ${2:t_padstackName})" },
		{ "trigger" : "axlCnsAssignPurge" , "contents" : "axlCnsAssignPurge(${1:s_tableType})" },
		{ "trigger" : "axlCNSCreate" , "contents" : "axlCNSCreate(${1:g_domain} ${2:t_name} ${3:t_copyName})" },
		{ "trigger" : "axlCNSDelete" , "contents" : "axlCNSDelete(${1:g_domain} ${2:t_name/o_dbidEcset})" },
		{ "trigger" : "axlCnsDeleteClassClassObjects" , "contents" : "axlCnsDeleteClassClassObjects()" },
		{ "trigger" : "axlCnsDeleteRegionClassClassObjects" , "contents" : "axlCnsDeleteRegionClassClassObjects()" },
		{ "trigger" : "axlCnsDeleteRegionClassObjects" , "contents" : "axlCnsDeleteRegionClassObjects()" },
		{ "trigger" : "axlCnsDeleteVia" , "contents" : "axlCnsDeleteVia(${1:t_csetName} ${2:t_padstackName})" },
		{ "trigger" : "axlCNSDesignModeGet" , "contents" : "axlCNSDesignModeGet(${1:nil})" },
		{ "trigger" : "axlCNSDesignModeGet" , "contents" : "axlCNSDesignModeGet(${1:s_name} ${2:/t_name})" },
		{ "trigger" : "axlCNSDesignModeGet" , "contents" : "axlCNSDesignModeGet()" },
		{ "trigger" : "axlCNSDesignModeGet" , "contents" : "axlCNSDesignModeGet(${1:nil})"},              
		{ "trigger" : "axlCNSDesignModeSet" , "contents" : "axlCNSDesignModeSet(${1:t_name} ${2:/s_name} ${3:t_mode} ${4:/s_mode})" },
		{ "trigger" : "axlCNSDesignModeSet" , "contents" : "axlCNSDesignModeSet(${1:l_constraintNModes} ${2:t_mode} ${3:/smode})" },
		{ "trigger" : "axlCNSDesignModeSet" , "contents" : "axlCNSDesignModeSet(${1:ll_constraintNModes})" },
		{ "trigger" : "axlCNSDesignValueCheck" , "contents" : "axlCNSDesignValueCheck(${1:s_name} ${2:/t_name} ${3:g_value})" },
		{ "trigger" : "axlCNSDesignValueGet" , "contents" : "axlCNSDesignValueGet(${1:nil} ${2:[g_returnNameString]})" },
		{ "trigger" : "axlCNSDesignValueGet" , "contents" : "axlCNSDesignValueGet(${1:s_name} ${2:[g_returnString]})" },
		{ "trigger" : "axlCNSDesignValueGet" , "contents" : "axlCNSDesignValueGet(${1:nil})" },
		{ "trigger" : "axlCNSDesignValueSet" , "contents" : "axlCNSDesignValueSet(${1:t_name} ${2:/s_name} ${3:f_value/t_value})" },
		{ "trigger" : "axlCNSDesignValueSet" , "contents" : "axlCNSDesignValueSet(${1:ll_constraintNValues})" },
		{ "trigger" : "axlCNSEcsetCreate" , "contents" : "axlCNSEcsetCreate(${1:t_name} ${2:[t_copyName/o_dbidCopyEcset]})" },
		{ "trigger" : "axlCNSEcsetDelete" , "contents" : "axlCNSEcsetDelete(${1:t_name} ${2:/o_dbidEcset})" },		
		{ "trigger" : "axlCNSEcsetGet" , "contents" : "axlCNSEcsetGet(${1:t_name})" },
		{ "trigger" : "axlCNSEcsetModeGet" , "contents" : "axlCNSEcsetModeGet(${1:s_name} ${2:/t_name})" },		
		{ "trigger" : "axlCNSEcsetModeSet" , "contents" : "axlCNSEcsetModeSet(${1:t_name} ${2:/s_name} ${3:t_mode} ${4:/s_mode})" },
		{ "trigger" : "axlCNSEcsetValueCheck" , "contents" : "axlCNSEcsetValueCheck(${1:s_name} ${2:/t_name} ${3:g_value})" },
		{ "trigger" : "axlCNSEcsetValueGet" , "contents" : "axlCNSEcsetValueGet(${1:nil} ${2:[g_returnNameString]})" },
		{ "trigger" : "axlCNSEcsetValueGet" , "contents" : "axlCNSEcsetValueGet(${1:o_ecsetDbid/t_ecsetName} ${2:s_name} ${3:[g_returnString]})" },		
		{ "trigger" : "axlCNSEcsetValueSet" , "contents" : "axlCNSEcsetValueSet(${1:o_ecsetDbid/t_ecsetName} ${2:t_name} ${3:/s_name} ${4:f_value})" },
		{ "trigger" : "axlCNSEcsetValueSet" , "contents" : "axlCNSEcsetValueSet(${1:o_ecsetDbid/t_ecsetName} ${2:ll_constraintNValues})" },
		{ "trigger" : "axlCNSGetDefaultMinLineWidth" , "contents" : "axlCNSGetDefaultMinLineWidth(${1:t_sublassName})" },
		{ "trigger" : "axlCNSGetPhysical" , "contents" : "axlCNSGetPhysical(${1:t_cset} ${2:t_layer} ${3:s_constraint} ${4:[g_string]})" },		
		{ "trigger" : "axlCNSGetPinDelayEnabled" , "contents" : "axlCNSGetPinDelayEnabled()" },
		{ "trigger" : "axlCNSGetPinDelayPVF" , "contents" : "axlCNSGetPinDelayPVF()" },
		{ "trigger" : "axlCNSGetSameNet" , "contents" : "axlCNSGetSameNet(${1:t_cset} ${2:t_layer} ${3:s_constraint} ${4:[g_string]})" },		
		{ "trigger" : "axlCNSGetSameNetXtalkEnabled" , "contents" : "axlCNSGetSameNetXtalkEnabled()" },
		{ "trigger" : "axlCNSGetSpacing" , "contents" : "axlCNSGetSpacing(${1:nil} ${2:nil} ${3:nil})" },
		{ "trigger" : "axlCnsGetViaList" , "contents" : "axlCnsGetViaList()" },		
		{ "trigger" : "axlCNSGetViaZEnabled" , "contents" : "axlCNSGetViaZEnabled()" },
		{ "trigger" : "axlCNSGetViaZPVF" , "contents" : "axlCNSGetViaZPVF()" },
		{ "trigger" : "axlCnsList" , "contents" : "axlCnsList(${1:nil})" },
		{ "trigger" : "axlCNSMapClear" , "contents" : "axlCNSMapClear()" },
		{ "trigger" : "axlCNSMapUpdate" , "contents" : "axlCNSMapUpdate()" },
		{ "trigger" : "axlCnsNetFlattened" , "contents" : "axlCnsNetFlattened(${1:o_netDbid/t_netName} ${2:t_cnsName/s_name})" },
		{ "trigger" : "axlCNSPhysicalModeGet" , "contents" : "axlCNSPhysicalModeGet(${1:s_name/t_name})" },
		{ "trigger" : "axlCNSPhysicalModeSet" , "contents" : "axlCNSPhysicalModeSet(${1:t_name/s_name} ${2:t_mode/s_mode})" },
		{ "trigger" : "axlCnsPurgeAll" , "contents" : "axlCnsPurgeAll()" },
		{ "trigger" : "axlCnsPurgeCsets" , "contents" : "axlCnsPurgeCsets(${1:list} ${2:l_type})" },
		{ "trigger" : "axlCnsPurgeObjects" , "contents" : "axlCnsPurgeObjects(${1:list} ${2:l_type})" },
		{ "trigger" : "axlCNSSameNetModeGet" , "contents" : "axlCNSSameNetModeGet(${1:nil})" },		
		{ "trigger" : "axlCNSSameNetModeSet" , "contents" : "axlCNSSameNetModeSet(${1:t_name/s_name} ${2:t_mode/s_mode})" },
		{ "trigger" : "axlCNSSetPhysical" , "contents" : "axlCNSSetPhysical(${1:t_cset/nil} ${2:t_layer/nil} ${3:s_constraint} ${4:g_value})" },
		{ "trigger" : "axlCNSSetPinDelayEnabled" , "contents" : "axlCNSSetPinDelayEnabled(${1:g_value})" },
		{ "trigger" : "axlCNSSetPinDelayPVF" , "contents" : "axlCNSSetPinDelayPVF(${1:g_value})" },
		{ "trigger" : "axlCNSSetSameNet" , "contents" : "axlCNSSetSameNet(${1:t_cset/nil} ${2:t_layer/nil} ${3:s_constraint} ${4:g_value})" },
		{ "trigger" : "axlCNSSetSameNet" , "contents" : "axlCNSSetSameNet(${1:t_cset/nil} ${2:t_layer/nil} ${3:ll_constraintValues} ${4:nil})" },
		{ "trigger" : "axlCNSSetSameNetXtalkEnabled" , "contents" : "axlCNSSetSameNetXtalkEnabled(${1:g_value})" },
		{ "trigger" : "axlCNSSetViaZEnabledenabled" , "contents" : "axlCNSSetViaZEnabledenabled(${1:g_value})" },
		{ "trigger" : "axlCNSSetViaZPVF" , "contents" : "axlCNSSetViaZPVF(${1:g_value})" },
		{ "trigger" : "axlCNSSetSpacing", "contents" : "axlCNSSetSpacing(${1:t_cset/nil} ${2:t_layer/nil} ${3:s_constraint} ${4:g_value})" },
		{ "trigger" : "axlCNSSpacingModeGet" , "contents" : "axlCNSSpacingModeGet(${1:nil})" },              
		{ "trigger" : "axlCNSSpacingModeSet" , "contents" : "axlCNSSpacingModeSet(${1:t_name/s_name} ${2:t_mode/s_mode})" },
		{ "trigger" : "axlCNSSpacingModeSet" , "contents" : "axlCNSSpacingModeSet(${1:l_constraintNModes} ${2:t_mode/smode})" },
		{ "trigger" : "axlCNSSpacingModeSet" , "contents" : "axlCNSSpacingModeSet(${1:ll_constraintNModes})" },
		{ "trigger" : "axlColorGet" , "contents" : "axlColorGet(${1:'all})" },
		{ "trigger" : "axlColorLoad" , "contents" : "axlColorLoad(${1:t_file/nil})" },		
		{ "trigger" : "axlColorOnGet" , "contents" : "axlColorOnGet(${1:x_colorNumber})" },
		{ "trigger" : "axlColorOnSet" , "contents" : "axlColorOnSet(${1:3} ${2:t})" },
		{ "trigger" : "axlColorPriorityGet" , "contents" : "axlColorPriorityGet(${1:2})" },              
		{ "trigger" : "axlColorPrioritySet" , "contents" : "axlColorPrioritySet(${1:4} ${2:1})" },
		{ "trigger" : "axlColorSave" , "contents" : "axlColorSave(${1:t_file/nil})" },
		{ "trigger" : "axlColorSet" , "contents" : "axlColorSet(${1:3} ${2:clr})" },
		{ "trigger" : "axlColorShadowGet" , "contents" : "axlColorShadowGet(${1:g_option})" },
		{ "trigger" : "axlColorShadowSet" , "contents" : "axlColorShadowSet(${1:'mode/'activeLayer} ${2:t/nil})" },
		{ "trigger" : "axlCompileSymbol" , "contents" : "axlCompileSymbol(${1:?symbol} ${2:t_name} ${3:?type} ${4:t_type})" },
		{ "trigger" : "axlConductorBottomLayer" , "contents" : "axlConductorBottomLayer()" },
		{ "trigger" : "axlConductorTopLayer" , "contents" : "axlConductorTopLayer()" },
		{ "trigger" : "axlControlRaise" , "contents" : "axlControlRaise(${1:g_option})" },
		{ "trigger" : "axlCopyObject" , "contents" : "axlCopyObject(${1:lo_dbid/o_dbid} ${2:?move} ${3:l_deltaPoint} ${4:?mirror} ${5:t/nil} ${6:?angle} ${7:f_angle} ${8:?origin} ${9:l_rotatePoint} ${10:?allOrNone} ${11:t/nil} ${12:?retainNet} ${13:t/nil})" },
		{ "trigger" : "axlCreateAttachment" , "contents" : "axlCreateAttachment(${1:t_attachmentId} ${2:t_passwd} ${3:x_revision} ${4:s_dataFormat} ${5:t_data})" },
		{ "trigger" : "axlCreateBondFinger" , "contents" : "axlCreateBondFinger(${1:parentSymbol} ${2:fingerName} ${3:list(fingerLocation fingerRotation fingerPadstack)} ${4:list(placementStyle ewlLength fingerSnap fingerAlign)})" },
		{ "trigger" : "axlCreateBondWire" , "contents" : "axlCreateBondWire(${1:parentSymbol} ${2:list(wireStartOwner wireStartLocation)} ${3:list(wireEndOwner wireEndLocation)} ${4:list(wireDiameter wireProfile)})" },
		{ "trigger" : "axlCreateWirebondGuide" , "contents" : "axlCreateWirebondGuide(${1:r_path})" },
		{ "trigger" : "axlCurrentDesign" , "contents" : "axlCurrentDesign()" },
		{ "trigger" : "axlCustomColorObject" , "contents" : "axlCustomColorObject(${1:[lo_dbid]} ${2:[g_custom_color]})" },
		{ "trigger" : "axlCVFColorChooserDlg" , "contents" : "axlCVFColorChooserDlg(${1:[x_color_index]} ${2:[g_show_hilite]} ${3:[x_hilite_flag]})" },
		{ "trigger" : "axlDB2Path" , "contents" : "axlDB2Path(${1:r_path} ${2:xy})" },
		{ "trigger" : "axlDB2Path" , "contents" : "axlDB2Path(${1:o_dbid})" },
		{ "trigger" : "axlDBActiveShape" , "contents" : "axlDBActiveShape()" },
		{ "trigger" : "axlDBAddGroupObjects" , "contents" : "axlDBAddGroupObjects(${1:o_group} ${2:lo_members})" },
		{ "trigger" : "axlDBAddProp" , "contents" : "axlDBAddProp(${1:lo_attach} ${2:ll_name_value})" },
		{ "trigger" : "axlDBAltOrigin" , "contents" : "axlDBAltOrigin(${1:g_mode} ${2:o_dbid})" },
		{ "trigger" : "axlDBAssignNet" , "contents" : "axlDBAssignNet(${1:o_object/lo_object} ${2:o_net/t_net} ${3:[g_ripup]})" },
		{ "trigger" : "axlDBAssignNet" , "contents" : "axlDBAssignNet(${1:pin_id} ${2:net_id} ${3:t})" },         
		{ "trigger" : "axlDBChangeDesignExtents" , "contents" : "axlDBChangeDesignExtents(${1:l_bBox})" },
		{ "trigger" : "axlDBChangeDesignExtents" , "contents" : "axlDBChangeDesignExtents(${1:extents})" },             
		{ "trigger" : "axlDBChangeDesignOrigin" , "contents" : "axlDBChangeDesignOrigin(${1:l_point})" },
		{ "trigger" : "axlDBChangeDesignUnits" , "contents" : "axlDBChangeDesignUnits(${1:t_units/nil} ${2:x_accuracy/nil} ${3:x_drcCount/nil})" },		
		{ "trigger" : "axlDBChangeText" , "contents" : "axlDBChangeText(${1:o_dbid} ${2:t_text} ${3:[r_textOrientation/x_textBlock]})" },
		{ "trigger" : "axlDBCheck" , "contents" : "axlDBCheck(${1:g_option/lg_options} ${2:[p_file]})" },
		{ "trigger" : "axlDBCloak" , "contents" : "axlDBCloak(${1:g_func} ${2:[g_mode]})" },
		{ "trigger" : "axlDBControl" , "contents" : "axlDBControl(${1:s_name} ${2:[g_value]})" },
		{ "trigger" : "axlDBCopyPadstack" , "contents" : "axlDBCopyPadstack(${1:rd_dbid} ${2:l_startEnd} ${3:[g_dontTrim]})" },
		{ "trigger" : "axlDBCreateCircle" , "contents" : "axlDBCreateCircle(${1:l_location} ${2:[f_width]} ${3:[t_layer]} ${4:[o_parent]})" },
		{ "trigger" : "axlDBCreateCloseShape" , "contents" : "axlDBCreateCloseShape(${1:myshape})" },              
		{ "trigger" : "axlDBCreateCloseShape" , "contents" : "axlDBCreateCloseShape(${1:o_shape})" },
		{ "trigger" : "axlDBCreateConceptComponent" , "contents" : "axlDBCreateConceptComponent(${1:s_refDes} ${2:s_deviceName} ${3:[s_package]} ${4:[s_value]} ${5:[s_tolerance]})" },
		{ "trigger" : "axlDBCreateConceptComponent" , "contents" : "axlDBCreateConceptComponent(${1:s_refdes} ${2:s_partPath} ${3:s_logName} ${4:s_primName} ${5:[s_pptRowName]})" },
		{ "trigger" : "axlDBCreateExternalDRC" , "contents" : "axlDBCreateExternalDRC(${1:t_constraint/lt_constraint} ${2:l_anchor_point} ${3:[t_layer]} ${4:[lo_dbid]} ${5:[l_secondPoint]} ${6:[t_actualValue]})" },
		{ "trigger" : "axlDBCreateFilmRec" , "contents" : "axlDBCreateFilmRec(${1:t_filmname} ${2:n_rotate_code} ${3:n_x_offset} ${4:n_y_offset} ${5:n_undef_line_width} ${6:n_shape_bound} ${7:n_plot_mode} ${8:n_mirrored} ${9:n_full_contact} ${10:n_supp_unconnect} ${11:n_draw_pad} ${12:n_aper_rot} ${13:n_fill_out_shapes} ${14:n_vector_based})" },
		{ "trigger" : "axlDBCreateGroup" , "contents" : "axlDBCreateGroup(${1:t_name} ${2:t_type} ${3:lo_groupMembers})" },
		{ "trigger" : "axlDBCreateLine" , "contents" : "axlDBCreateLine(${1:l_points} ${2:[f_width]} ${3:[t_layer]} ${4:[t_netname]} ${5:[0_parent]})" },
		{ "trigger" : "axlDBCreateManyModuleInstances" , "contents" : "axlDBCreateManyModuleInstances(${1:t_name} ${2:t_moddefName} ${3:x_tileStartNum} ${4:l_origin} ${5:l_offset} ${6:x_num_tiles} ${7:f_rotation} ${8:x_logicMethod} ${9:[l_netExcept]} ${10:[g_mirror]})" },
		{ "trigger" : "axlDBCreateModuleDef" , "contents" : "axlDBCreateModuleDef(${1:t_name} ${2:l_origin} ${3:l_objects})" },
		{ "trigger" : "axlDBCreateModuleInstance" , "contents" : "axlDBCreateModuleInstance(${1:t_name} ${2:t_moddef_name} ${3:l_origin} ${4:r_rotation} ${5:i_logic_method} ${6:l_net_except})" },
		{ "trigger" : "axlDBCreateNet" , "contents" : "axlDBCreateNet(${1:t_netName})" },
		{ "trigger" : "axlDBCreateOpenShape" , "contents" : "axlDBCreateOpenShape(${1:o_polygon/r_path} ${2:[l_r_fill]} ${3:[t_layer]} ${4:[t_netName} ${5:/o_netdbid]} ${6:[o_parent]})" },
		{ "trigger" : "axlDBCreatePadStack" , "contents" : "axlDBCreatePadStack(${1:t_name} ${2:r_drill} ${3:l_pad} ${4:[g_nocheck]})" },
		{ "trigger" : "axlDBCreatePath" , "contents" : "axlDBCreatePath(${1:path})" },            
		{ "trigger" : "axlDBCreatePin" , "contents" : "axlDBCreatePin(${1:t_padstack/o_padstackDbid} ${2:l_anchorPoint} ${3:r_pinText/nil} ${4:[f_rotation]})" },
		{ "trigger" : "axlDBCreatePropDictEntry" , "contents" : "axlDBCreatePropDictEntry(${1:t_name} ${2:t_type} ${3:lt_objects} ${4:[ln_range]} ${5:[t_units]} ${6:[g_hidden]})" },         
		{ "trigger" : "axlDBCreateRectangle" , "contents" : "axlDBCreateRectangle(${1:l_bBox} ${2:[g_fill]} ${3:[t_layer]} ${4:[t_netname]} ${5:[o_parent]})" },
		{ "trigger" : "axlDBCreateShape" , "contents" : "axlDBCreateShape(${1:o_polygon/r_path} ${2:[l_r_fill]} ${3:[t_layer]} ${4:[t_netName]} ${5:[o_parent]})" },
		{ "trigger" : "axlDBCreateSymbol" , "contents" : "axlDBCreateSymbol(${1:t_refdes} ${2:l_anchorPoint} ${3:[g_mirror]} ${4:[f_rotation]})" },
		{ "trigger" : "axlDBCreateSymbol" , "contents" : "axlDBCreateSymbol(${1:l_symbolData} ${2:l_anchorPoint} ${3:[g_mirror]} ${4:[f_rotation]})" },
		{ "trigger" : "axlDBCreateSymbolAutosilk" , "contents" : "axlDBCreateSymbolAutosilk(${1:o_symbol})" },
		{ "trigger" : "axlDBCreateSymbolSkeleton" , "contents" : "axlDBCreateSymbolSkeleton(${1:t_refdes} ${2:l_anchorPoint} ${3:g_mirror} ${4:f_rotation} ${5:l_pinData})" },
		{ "trigger" : "axlDBCreateSymbolSkeleton" , "contents" : "axlDBCreateSymbolSkeleton(${1:l_symbolData} ${2:l_anchorPoint} ${3:g_mirror} ${4:f_rotation} ${5:l_pinData})" },
		{ "trigger" : "axlDBCreateSymDefSkeleton" , "contents" : "axlDBCreateSymDefSkeleton(${1:l_symbolData} ${2:l_extents} ${3:[l_pinData]})" },
		{ "trigger" : "axlDBCreateText" , "contents" : "axlDBCreateText(${1:t_text} ${2:l_anchorPoint} ${3:r_textOrientation} ${4:[t_layer]} ${5:[o_attach]})" },
		{ "trigger" : "axlDBCreateVia" , "contents" : "axlDBCreateVia(${1:t_padstack/o_padstackDbid} ${2:l_anchorPoint} ${3:[t_netName]} ${4:[g_mirror]} ${5:[f_rotation]} ${6:[o_parent]})" },
		{ "trigger" : "axlDBCreateVoid" , "contents" : "axlDBCreateVoid(${1:o_shape/nil} ${2:r_path/o_polygon})" },
		{ "trigger" : "axlDBCreateVoidCircle" , "contents" : "axlDBCreateVoidCircle(${1:o_shape} ${2:l_location} ${3:[f_width]})" },
		{ "trigger" : "axlDBDeleteProp" , "contents" : "axlDBDeleteProp(${1:lo_attach} ${2:lt_name})" },
		{ "trigger" : "axlDBDeletePropAll" , "contents" : "axlDBDeletePropAll(${1:t_name})" },
		{ "trigger" : "axlDBDeletePropDictEntry" , "contents" : "axlDBDeletePropDictEntry(${1:t_name})" },
		{ "trigger" : "axlDBDellLock" , "contents" : "axlDBDellLock(${1:[t_password]})" },
		{ "trigger" : "axlDBDelLock" , "contents" : "axlDBDelLock()" },
		{ "trigger" : "axlDBDisbandGroup" , "contents" : "axlDBDisbandGroup(${1:o_group})" },
		{ "trigger" : "axlDBDynamicShapes" , "contents" : "axlDBDynamicShapes(${1:g_value})" },
		{ "trigger" : "axlDBFindByName" , "contents" : "axlDBFindByName(${1:s_type} ${2:t_name})" },
		{ "trigger" : "axlDBGetAttachedText" , "contents" : "axlDBGetAttachedText(${1:o_dbid})" },
		{ "trigger" : "axlDBGetConnect" , "contents" : "axlDBGetConnect(${1:o_dbid} ${2:t_full})" },
		{ "trigger" : "axlDBGetDesign" , "contents" : "axlDBGetDesign()" },
		{ "trigger" : "axlDBGetDesignUnits" , "contents" : "axlDBGetDesignUnits()" },
		{ "trigger" : "axlDBGetDrillPlating" , "contents" : "axlDBGetDrillPlating(${1:t_padstackname})" },
		{ "trigger" : "axlDBGetExtents" , "contents" : "axlDBGetExtents(${1:o_dbid} ${2:g_visibleOnly})" },
		{ "trigger" : "axlDBGetGroupFromItem" , "contents" : "axlDBGetGroupFromItem(${1:o_dbid} ${2:t_groupType} ${3:[g_promoteToNet]})" },
		{ "trigger" : "axlDBGetLayerType" , "contents" : "axlDBGetLayerType(${1:t_layerName})" },
		{ "trigger" : "axlDBGetLength" , "contents" : "axlDBGetLength(${1:o_dbid})" },
		{ "trigger" : "axlDBGetLock" , "contents" : "axlDBGetLock()" },
		{ "trigger" : "axlDBGetLonelyBranches" , "contents" : "axlDBGetLonelyBranches()" },
		{ "trigger" : "axlDBGetManhattan" , "contents" : "axlDBGetManhattan(${1:o_dbid_net})" },         
		{ "trigger" : "axlDBGetPad" , "contents" : "axlDBGetPad(${1:o_dbid} ${2:t_layer} ${3:t_type})" },
		{ "trigger" : "axlDBGetPropDictEntry" , "contents" : "axlDBGetPropDictEntry(${1:t_name})" },
		{ "trigger" : "axlDBGetPropDictEntry" , "contents" : "axlDBGetPropDictEntry(${1:nil})" },
		{ "trigger" : "axlDBGetProperties" , "contents" : "axlDBGetProperties(${1:o_dbid} ${2:[lt_type]})" },
		{ "trigger" : "axlDBGetShapes" , "contents" : "axlDBGetShapes(${1:t_layer})" },      
		{ "trigger" : "axlDbidName" , "contents" : "axlDbidName(${1:o_dbid})" },
		{ "trigger" : "axlDBIgnoreFixed" , "contents" : "axlDBIgnoreFixed(${1:[g_ignore]})" },
		{ "trigger" : "axlDBIsBondingWireLayer" , "contents" : "axlDBIsBondingWireLayer(${1:t_layerName})" },
		{ "trigger" : "axlDBIsBondpad" , "contents" : "axlDBIsBondpad(${1:o_dbid})" },
		{ "trigger" : "axlDBIsBondwire" , "contents" : "axlDBIsBondwire(${1:o_dbid})" },
		{ "trigger" : "axlDBIsDiePad" , "contents" : "axlDBIsDiePad(${1:rd_dbid})" },
		{ "trigger" : "axlDBIsDieStackLayer" , "contents" : "axlDBIsDieStackLayer(${1:t_layerName})" },
		{ "trigger" : "axlDBIsFixed" , "contents" : "axlDBIsFixed(${1:o_dbid} ${2:[g_showMessage]})" },
		{ "trigger" : "axlDBIsPackagePin" , "contents" : "axlDBIsPackagePin(${1:rd_dbid})" },
		{ "trigger" : "axlDBIsPlatingbarPin" , "contents" : "axlDBIsPlatingbarPin(${1:rd_dbid})" },
		{ "trigger" : "axlDBOpenShape" , "contents" : "axlDBOpenShape(${1:o_shapeDbid/nil} ${2:[o_polygon/r_path/nil]} ${3:[g_close]})" },
		{ "trigger" : "axlDBRefreshId" , "contents" : "axlDBRefreshId(${1:o_dbid} ${2:/nil})" },
		{ "trigger" : "axlDBRefreshId" , "contents" : "axlDBRefreshId(${1:mybranch})" },         
		{ "trigger" : "axlDBRemoveGroupObjects" , "contents" : "axlDBRemoveGroupObjects(${1:o_group} ${2:lo_members})" },
		{ "trigger" : "axlDBSectorSize" , "contents" : "axlDBSectorSize(${1:[f_size]})" },
		{ "trigger" : "axlDBSetLock" , "contents" : "axlDBSetLock()" },
		{ "trigger" : "axlDBTextBlockCompact" , "contents" : "axlDBTextBlockCompact(${1:t/nil})" },
		{ "trigger" : "axlDBTransactionCommit" , "contents" : "axlDBTransactionCommit(${1:x_mark})" },
		{ "trigger" : "axlDBTransactionMark" , "contents" : "axlDBTransactionMark(${1:x_mark})" },
		{ "trigger" : "axlDBTransactionOops" , "contents" : "axlDBTransactionOops(${1:x_mark})" },
		{ "trigger" : "axlDBTransactionOops" , "contents" : "axlDBTransactionOops(${1:mark})" },        
		{ "trigger" : "axlDBTransactionRollback" , "contents" : "axlDBTransactionRollback(${1:x_mark})" },
		{ "trigger" : "axlDBTransactionStart" , "contents" : "axlDBTransactionStart()" },
		{ "trigger" : "axlDBTuneSectorSize" , "contents" : "axlDBTuneSectorSize()" },
		{ "trigger" : "axlDebug" , "contents" : "axlDebug(${1:t/nil})" },
		{ "trigger" : "axlDehighlightObject" , "contents" : "axlDehighlightObject(${1:[lo_dbid]} ${2:[g_permHighlight]})" },
		{ "trigger" : "axlDeleteAttachment" , "contents" : "axlDeleteAttachment(${1:t_attachmentId} ${2:[t_passwd]})" },
		{ "trigger" : "axlDeleteFillet" , "contents" : "axlDeleteFillet(${1:o_dbid})" },
		{ "trigger" : "axlDeleteObject" , "contents" : "axlDeleteObject(${1:o_dbid/lo_dbid} ${2:g_mode})" },	
		{ "trigger" : "axlDesignFlip" , "contents" : "axlDesignFlip(${1:g_flip})" },
		{ "trigger" : "axlDesignType" , "contents" : "axlDesignType(${1:g_detailed})" },
		{ "trigger" : "axlDetailLoad" , "contents" : "axlDetailLoad(${1:t_filename} ${2:point} ${3:f_scale} ${4:x_rotation} ${5:g_mirror})" },
		{ "trigger" : "axlDetailSave" , "contents" : "axlDetailSave(${1:t_filename} ${2:l_bBox} ${3:o_dbid/lo_dbid})" },
		{ "trigger" : "axlDiffPair" , "contents" : "axlDiffPair(${1:t_diffpair} ${2:o_net1} ${3:/t_net1} ${4:o_net2} ${5:/t_net2})" },
		{ "trigger" : "axlDiffPair" , "contents" : "axlDiffPair(${1:o_diffpair/t_diffpair} ${2:o_net1} ${3:/t_net1} ${4:o_net2} ${5:/t_net2})" },
		{ "trigger" : "axlDiffPair" , "contents" : "axlDiffPair(${1:o_diffpair/t_diffpair})" },
		{ "trigger" : "axlDiffPair" , "contents" : "axlDiffPair(${1:DPdbid})" },
		{ "trigger" : "axlDiffPairAuto" , "contents" : "axlDiffPairAuto(${1:t_diffPairPrefix} ${2:t_posNetPostfix} ${3:t_negNetPostfix} ${4:[g_returnDiffPairList]})" },
		{ "trigger" : "axlDiffPairDBID" , "contents" : "axlDiffPairDBID(${1:t_name})" },
		{ "trigger" : "axlDistance" , "contents" : "axlDistance(${1:l_point1} ${2:l_point2})" },
		{ "trigger" : "axlDllCall" , "contents" : "axlDllCall(${1:o_pluginFunc} ${2:l_args/nil})" },
		{ "trigger" : "axlDllClose" , "contents" : "axlDllClose(${1:o_plugin})" },
		{ "trigger" : "axlDllDump" , "contents" : "axlDllDump()" },
		{ "trigger" : "axlDllOpen" , "contents" : "axlDllOpen(${1:t_dllname})" },
		{ "trigger" : "axlDllSym" , "contents" : "axlDllSym(${1:o_plugin} ${2:t_symbolName})" },
		{ "trigger" : "axlDMBrowsePath" , "contents" : "axlDMBrowsePath(${1:t_adsFileType} ${2:[t_title]} ${3:[t_helpTag]})" },
		{ "trigger" : "axlDMClose" , "contents" : "axlDMClose(${1:p_port})" },
		{ "trigger" : "axlDMClose" , "contents" : "axlDMClose(${1:mylog})" },             
		{ "trigger" : "axlDMDirectoryBrowse" , "contents" : "axlDMDirectoryBrowse(${1:t_startingDirectory} ${2:g_writeFlag} ${3:[?helpTag} ${4:t_helpTag]} ${5:[?title} ${6:t_title]})" },
		{ "trigger" : "axlDMFileBrowse" , "contents" : "axlDMFileBrowse(${1:t_fileType} ${2:g_writeFlag} ${3:[t_defaultName]} ${4:[t_helpTag]} ${5:[g_directorySet]} ${6:[g_noDirectoryButton]} ${7:[g_mainFile]} ${8:[g_noSticky]} ${9:[t_title]} ${10:[t_filters]})" },
		{ "trigger" : "axlDMFileError" , "contents" : "axlDMFileError()" },
		{ "trigger" : "axlDMFileParts" , "contents" : "axlDMFileParts(${1:t_filespec})" },
		{ "trigger" : "axlDMFindFile" , "contents" : "axlDMFindFile(${1:t_id} ${2:t_name} ${3:t_mode} ${4:[t_prop]})" },
		{ "trigger" : "axlDMGetFile" , "contents" : "axlDMGetFile(${1:t_id} ${2:t_name} ${3:t_mode} ${4:[t_prop]})" },
		{ "trigger" : "axlDMOpenFile" , "contents" : "axlDMOpenFile(${1:t_id} ${2:t_name} ${3:t_mode})" },
		{ "trigger" : "axlDMOpenLog" , "contents" : "axlDMOpenLog(${1:t_program})" },
		{ "trigger" : "axldo" , "contents" : "axldo(${1:g_initList} ${2:g_terminateList} ${3:[g_body]})" },
		{ "trigger" : "axldoStar" , "contents" : "axldoStar(${1:g_initList} ${2:g_terminateList} ${3:[g_body]})" },
		{ "trigger" : "axlDrawObject" , "contents" : "axlDrawObject(${1:lo_dbid})" },
		{ "trigger" : "axlDRCGetCount" , "contents" : "axlDRCGetCount()" },
		{ "trigger" : "axlDRCItem" , "contents" : "axlDRCItem(${1:g_mode} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlDRCUpdate" , "contents" : "axlDRCUpdate(${1:g_mode})" },
		{ "trigger" : "axlDRCWaive" , "contents" : "axlDRCWaive(${1:g_mode} ${2:o_DrcDbid/lo_DrcDbid} ${3:[t_comment]})" },
		{ "trigger" : "axlDRCWaiveGetCount" , "contents" : "axlDRCWaiveGetCount()" },
		{ "trigger" : "axlDynamicsObject" , "contents" : "axlDynamicsObject(${1:lo_dbid} ${2:[l_ref_point]})" },
		{ "trigger" : "axlEmail" , "contents" : "axlEmail(${1:t_to} ${2:t_cc/nil} ${3:t_subject} ${4:t_body})" },
		{ "trigger" : "axlEndSkillMode" , "contents" : "axlEndSkillMode()" },
		{ "trigger" : "axlEnterAngle" , "contents" : "axlEnterAngle(${1:origin} ${2:?prompts} ${3:l_prompts} ${4:?refPoint} ${5:l_refPoint} ${6:?angle} ${7:f_angle} ${8:?lockAngle} ${9:g_lockAngle})" },
		{ "trigger" : "axlEnterBox" , "contents" : "axlEnterBox(${1:?prompts} ${2:l_prompts} ${3:?points} ${4:l_points})" },
		{ "trigger" : "axlEnterEvent" , "contents" : "axlEnterEvent(${1:l_eventMask} ${2:t_prompt} ${3:g_snap})" },
		{ "trigger" : "axlEnterPath" , "contents" : "axlEnterPath(${1:?prompts} ${2:l_prompts} ${3:?points} ${4:l_points} ${5:?lastPath} ${6:r_path})" },
		{ "trigger" : "axlEnterPoint" , "contents" : "axlEnterPoint(${1:?prompts} ${2:l_prompts} ${3:?points} ${4:l_points} ${5:?gridSnap} ${6:g_gridSnap})" },
		{ "trigger" : "axlEnterString" , "contents" : "axlEnterString(${1:?prompts} ${2:l_prompts})" },
		{ "trigger" : "axlEraseObject" , "contents" : "axlEraseObject(${1:lo_dbid})" },
		{ "trigger" : "axlEventSetStartPopup" , "contents" : "axlEventSetStartPopup(${1:[s_callback]})" },
		{ "trigger" : "axlEventSetStartPopup" , "contents" : "axlEventSetStartPopup()" },
		{ "trigger" : "axlExtentDB" , "contents" : "axlExtentDB()" },
		{ "trigger" : "axlExtentLayout" , "contents" : "axlExtentLayout()" },
		{ "trigger" : "axlExtentSymbol" , "contents" : "axlExtentSymbol()" },
		{ "trigger" : "axlExtractMap" , "contents" : "axlExtractMap(${1:t_viewFile} ${2:[s_applyFunc]} ${3:[g_userData]})" },
		{ "trigger" : "axlExtractToFile" , "contents" : "axlExtractToFile(${1:t_viewFile} ${2:lt_resultFiles} ${3:[lt_options]})" },
		{ "trigger" : "axlFillet" , "contents" : "axlFillet(${1:o_dbid})" },
		{ "trigger" : "axlFindFilterIsOpen" , "contents" : "axlFindFilterIsOpen()" },
		{ "trigger" : "axlFinishEnterFun" , "contents" : "axlFinishEnterFun()" },
		{ "trigger" : "axlFlushDisplay" , "contents" : "axlFlushDisplay()" },
		{ "trigger" : "axlFormAutoResize" , "contents" : "axlFormAutoResize(${1:r_form})" },
		{ "trigger" : "axlFormBuildPopup" , "contents" : "axlFormBuildPopup(${1:r_form} ${2:t_field} ${3:l_pairs})" },
		{ "trigger" : "axlFormClose" , "contents" : "axlFormClose(${1:r_form})" },
		{ "trigger" : "axlFormColorize" , "contents" : "axlFormColorize(${1:o_form} ${2:t_field} ${3:g_option} ${4:g_color})" },
		{ "trigger" : "axlFormCreate" , "contents" : "axlFormCreate(${1:s_formHandle} ${2:t_formfile/(} ${3:t_formName} ${4:t_contents} ${5:[lt_placement]} ${6:g_formAction} ${7:g_nonBlock} ${8:[g_stringOption]})" },
		{ "trigger" : "axlFormDefaultButton" , "contents" : "axlFormDefaultButton(${1:r_form} ${2:t_field/g_mode})" },
		{ "trigger" : "axlFormDefaultButton" , "contents" : "axlFormDefaultButton(${1:form} ${2:nil})" },             
		{ "trigger" : "axlFormDisplay" , "contents" : "axlFormDisplay(${1:r_form})" },
		{ "trigger" : "axlFormDisplay" , "contents" : "axlFormDisplay(${1:form})" },            
		{ "trigger" : "axlFormGetActiveField" , "contents" : "axlFormGetActiveField(${1:r_form})" },
		{ "trigger" : "axlFormGetField" , "contents" : "axlFormGetField(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormGetFieldType" , "contents" : "axlFormGetFieldType(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormGridBatch" , "contents" : "axlFormGridBatch(${1:r_cell})" },
		{ "trigger" : "axlFormGridCancelPopup" , "contents" : "axlFormGridCancelPopup(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormGridDeleteRows" , "contents" : "axlFormGridDeleteRows(${1:r_form} ${2:t_field} ${3:x_row} ${4:x_number})" },
		{ "trigger" : "axlFormGridEvents" , "contents" : "axlFormGridEvents(${1:r_form} ${2:t_field} ${3:s_events})" },
		{ "trigger" : "axlFormGridGetCell" , "contents" : "axlFormGridGetCell(${1:r_form} ${2:t_field} ${3:r_cell})" },
		{ "trigger" : "axlFormGridInsertCol" , "contents" : "axlFormGridInsertCol(${1:r_form} ${2:t_field} ${3:r_formGridCol})" },
		{ "trigger" : "axlFormGridInsertRows" , "contents" : "axlFormGridInsertRows(${1:r_form} ${2:t_field} ${3:x_row} ${4:x_number})" },
		{ "trigger" : "axlFormGridNewCell" , "contents" : "axlFormGridNewCell()" },
		{ "trigger" : "axlFormGridOptions" , "contents" : "axlFormGridOptions(${1:r_form} ${2:t_field} ${3:s_name} ${4:[g_value]})" },
		{ "trigger" : "axlFormGridReset" , "contents" : "axlFormGridReset(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormGridSetBatch" , "contents" : "axlFormGridSetBatch(${1:r_form} ${2:t_field} ${3:s_callback} ${4:g_pvtData})" },
		{ "trigger" : "axlFormGridUpdate" , "contents" : "axlFormGridUpdate(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormInvalidateField" , "contents" : "axlFormInvalidateField(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormIsFieldEditable" , "contents" : "axlFormIsFieldEditable(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormIsFieldVisible" , "contents" : "axlFormIsFieldVisible(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormListAddItem" , "contents" : "axlFormListAddItem(${1:r_form} ${2:t_field} ${3:t_listItem/lt_listItems} ${4:/nil} ${5:g_index})" },
		{ "trigger" : "axlFormListDeleteAll" , "contents" : "axlFormListDeleteAll(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormListDeleteItem" , "contents" : "axlFormListDeleteItem(${1:r_form} ${2:t_field} ${3:t_listItem/x_index/lt_listItem/nil})" },
		{ "trigger" : "axlFormListGetItem" , "contents" : "axlFormListGetItem(${1:r_form} ${2:t_field} ${3:x_index})" },
		{ "trigger" : "axlFormListGetSelCount" , "contents" : "axlFormListGetSelCount(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormListGetSelItems" , "contents" : "axlFormListGetSelItems(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormListOptions" , "contents" : "axlFormListOptions(${1:r_form} ${2:t_field} ${3:s_options})" },
		{ "trigger" : "axlFormListSelAll" , "contents" : "axlFormListSelAll(${1:r_form} ${2:t_field} ${3:g_set})" },
		{ "trigger" : "axlFormListSelect" , "contents" : "axlFormListSelect(${1:r_form} ${2:t_field} ${3:t_listItem/nil})" },
		{ "trigger" : "axlFormMsg" , "contents" : "axlFormMsg(${1:r_form} ${2:t_messageLabel} ${3:[g_arg1} ${4:...]})" },
		{ "trigger" : "axlFormRestoreField" , "contents" : "axlFormRestoreField(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormSetActiveField" , "contents" : "axlFormSetActiveField(${1:r_form} ${2:t_field})" },
		{ "trigger" : "axlFormSetDecimal" , "contents" : "axlFormSetDecimal(${1:o_form} ${2:g_field} ${3:x_decimalPlaces})" },
		{ "trigger" : "axlFormSetEventAction" , "contents" : "axlFormSetEventAction(${1:r_form} ${2:g_callback})" },
		{ "trigger" : "axlFormSetField" , "contents" : "axlFormSetField(${1:r_form} ${2:t_field} ${3:g_value/nil})" },
		{ "trigger" : "axlFormSetFieldEditable" , "contents" : "axlFormSetFieldEditable(${1:r_form} ${2:t_field} ${3:g_editable})" },
		{ "trigger" : "axlFormSetFieldLimits" , "contents" : "axlFormSetFieldLimits(${1:o_form} ${2:t_field} ${3:g_min} ${4:g_max})" },
		{ "trigger" : "axlFormSetFieldVisible" , "contents" : "axlFormSetFieldVisible(${1:r_form} ${2:t_field} ${3:x_value})" },
		{ "trigger" : "axlFormSetInfo" , "contents" : "axlFormSetInfo(${1:r_form} ${2:t_field} ${3:t_value})" },
		{ "trigger" : "axlFormTest" , "contents" : "axlFormTest(${1:t_formName})" },
		{ "trigger" : "axlFormTitle" , "contents" : "axlFormTitle(${1:r_form} ${2:t_title})" },
		{ "trigger" : "axlFormTreeViewAddItem" , "contents" : "axlFormTreeViewAddItem(${1:r_form} ${2:t_field} ${3:t_label} ${4:g_hParent} ${5:g_hInsertAfter} ${6:[g_multiSelectF]} ${7:[g_hLeafImage]} ${8:[g_hOpenImage]} ${9:[g_hClosedImage]})" },
		{ "trigger" : "axlFormTreeViewChangeImages" , "contents" : "axlFormTreeViewChangeImages(${1:r_form} ${2:t_field} ${3:g_hItem} ${4:[g_hLeafImage]} ${5:[g_hOpenImage]} ${6:[g_hClosedImage]})" },
		{ "trigger" : "axlFormTreeViewChangeLabel" , "contents" : "axlFormTreeViewChangeLabel(${1:r_form} ${2:t_field} ${3:g_hItem} ${4:t_label})" },
		{ "trigger" : "axlFormTreeViewGetImages" , "contents" : "axlFormTreeViewGetImages(${1:r_form} ${2:t_field} ${3:g_hItem})" },
		{ "trigger" : "axlFormTreeViewGetLabel" , "contents" : "axlFormTreeViewGetLabel(${1:r_form} ${2:t_field} ${3:g_hItem})" },
		{ "trigger" : "axlFormTreeViewGetParents" , "contents" : "axlFormTreeViewGetParents(${1:r_form} ${2:t_field} ${3:g_hItem})" },
		{ "trigger" : "axlFormTreeViewGetSelectState" , "contents" : "axlFormTreeViewGetSelectState(${1:r_form} ${2:t_field} ${3:g_hItem})" },
		{ "trigger" : "axlFormTreeViewLoadBitmaps" , "contents" : "axlFormTreeViewLoadBitmaps(${1:r_form} ${2:t_field} ${3:lt_bitmaps})" },
		{ "trigger" : "axlFormTreeViewSet" , "contents" : "axlFormTreeViewSet(${1:r_form} ${2:t_field} ${3:s_option} ${4:g_hItem} ${5:[g_data]})" },
		{ "trigger" : "axlFormTreeViewSetSelectState" , "contents" : "axlFormTreeViewSetSelectState(${1:r_form} ${2:t_field} ${3:g_hItem} ${4:g_state})" },
		{ "trigger" : "axlGeo2Str" , "contents" : "axlGeo2Str(${1:f_dbrep/point})" },
		{ "trigger" : "axlGeoArcCenterAngle" , "contents" : "axlGeoArcCenterAngle(${1:l_startPoint} ${2:l_endPoint} ${3:f_angle} ${4:[g_clockwise]})" },
		{ "trigger" : "axlGeoArcCenterRadius" , "contents" : "axlGeoArcCenterRadius(${1:l_startPoint} ${2:l_endPoint} ${3:f_radius} ${4:[g_clockwise]} ${5:[g_bigArc]})" },
		{ "trigger" : "axlGeoEqual" , "contents" : "axlGeoEqual(${1:f_one} ${2:f_two})" },
		{ "trigger" : "axlGeoPointInShape" , "contents" : "axlGeoPointInShape(${1:l_point} ${2:o_dbid/o_polygon} ${3:[g_include_voids]} ${4:[t/nil]})" },
		{ "trigger" : "axlGeoPointShapeInfo" , "contents" : "axlGeoPointShapeInfo(${1:l_point} ${2:o_dbid})" },
		{ "trigger" : "axlGeoRotatePt" , "contents" : "axlGeoRotatePt(${1:f_angle} ${2:l_xy} ${3:l_origin/nil} ${4:[mirror]})" },
		{ "trigger" : "axlGetActiveLayer" , "contents" : "axlGetActiveLayer()" },
		{ "trigger" : "axlGetActiveTextBlock" , "contents" : "axlGetActiveTextBlock()" },
		{ "trigger" : "axlGetAlias" , "contents" : "axlGetAlias(${1:t_alias/nil})" },
		{ "trigger" : "axlGetAllAttachmentNames" , "contents" : "axlGetAllAttachmentNames()" },
		{ "trigger" : "axlGetAllViaList" , "contents" : "axlGetAllViaList(${1:[g_attrVias]})" },
		{ "trigger" : "axlGetAttachment" , "contents" : "axlGetAttachment()" },
		{ "trigger" : "axlGetAttachment" , "contents" : "axlGetAttachment(${1:t_attachmentId} ${2:[s_dataFormat]})" },
		{ "trigger" : "axlGetDieData" , "contents" : "axlGetDieData(${1:g_dieId})" },
		{ "trigger" : "axlGetDieStackData" , "contents" : "axlGetDieStackData(${1:g_stackArg})" },
		{ "trigger" : "axlGetDieStackMemberSet" , "contents" : "axlGetDieStackMemberSet()" },
		{ "trigger" : "axlGetDieStackNames" , "contents" : "axlGetDieStackNames()" },
		{ "trigger" : "axlGetDieType" , "contents" : "axlGetDieType(${1:componentDBID})" },
		{ "trigger" : "axlGetDieType" , "contents" : "axlGetDieType(${1:myComp})" },             
		{ "trigger" : "axlGetDrawingName" , "contents" : "axlGetDrawingName()" },
		{ "trigger" : "axlGetDynamicsSegs" , "contents" : "axlGetDynamicsSegs(${1:l_point1} ${2:l_point2} ${3:r_lastPath/nil})" },
		{ "trigger" : "axlGetFindFilter" , "contents" : "axlGetFindFilter(${1:[onButtonF]})" },
		{ "trigger" : "axlGetFindfilter" , "contents" : "axlGetFindfilter(${1:?enabled} ${2:myglobal_enabled} ${3:?onButtons} ${4:myglobal_onButtons})" },           
		{ "trigger" : "axlGetFuncKey" , "contents" : "axlGetFuncKey(${1:t_alias/nil})" },
		{ "trigger" : "axlGetImpedance" , "contents" : "axlGetImpedance(${1:o_dbid})" },
		{ "trigger" : "axlGetIposerData" , "contents" : "axlGetIposerData(${1:g_iposerId})" },
		{ "trigger" : "axlGetLastEnterPoint" , "contents" : "axlGetLastEnterPoint()" },
		{ "trigger" : "axlGetLineLock" , "contents" : "axlGetLineLock(${1:s_name} ${2:[g_value]})" },
		{ "trigger" : "axlGetModuleInstanceDefinition" , "contents" : "axlGetModuleInstanceDefinition(${1:o_modinst})" },		
		{ "trigger" : "axlGetModuleInstanceLocation" , "contents" : "axlGetModuleInstanceLocation(${1:o_modinst})" },	
		{ "trigger" : "axlGetModuleInstanceLogicMethod" , "contents" : "axlGetModuleInstanceLogicMethod(${1:modinst})" },	             
		{ "trigger" : "axlGetModuleInstanceMethod" , "contents" : "axlGetModuleInstanceMethod(${1:o_modinst})" },
		{ "trigger" : "axlGetModuleInstanceNetExceptions" , "contents" : "axlGetModuleInstanceNetExceptions(${1:o_modinst})" },
		{ "trigger" : "axlGetModuleInstanceNetExceptions" , "contents" : "axlGetModuleInstanceNetExceptions(${1:modinst})" },
		{ "trigger" : "axlGetParam" , "contents" : "axlGetParam(${1:t_parm_name})" },
		{ "trigger" : "axlGetSelSet" , "contents" : "axlGetSelSet()" },
		{ "trigger" : "axlGetSelSetCount" , "contents" : "axlGetSelSetCount()" },
		{ "trigger" : "axlGetSpacerData" , "contents" : "axlGetSpacerData(${1:g_spacerId})" },
		{ "trigger" : "axlGetTrapBox" , "contents" : "axlGetTrapBox(${1:l_point})" },
		{ "trigger" : "axlGetVariable" , "contents" : "axlGetVariable(${1:t_variable})" },
		{ "trigger" : "axlGetVariableList" , "contents" : "axlGetVariableList(${1:t_variable/nil})" },
		{ "trigger" : "axlGetWireProfileColor" , "contents" : "axlGetWireProfileColor(${1:t_profile})" },	              
		{ "trigger" : "axlGetWireProfileVisible" , "contents" : "axlGetWireProfileVisible(${1:t_profile})" },	              
		{ "trigger" : "axlGetXSection" , "contents" : "axlGetXSection()" },
		{ "trigger" : "axlGRPDrwBitmap" , "contents" : "axlGRPDrwBitmap(${1:r_graphics} ${2:t_bitmap})" },
		{ "trigger" : "axlGRPDrwCircle" , "contents" : "axlGRPDrwCircle(${1:r_graphics} ${2:l_origin} ${3:x_radius})" },
		{ "trigger" : "axlGRPDrwInit" , "contents" : "axlGRPDrwInit(${1:r_form} ${2:t_field} ${3:t_func})" },
		{ "trigger" : "axlGRPDrwLine" , "contents" : "axlGRPDrwLine(${1:r_graphics} ${2:l_vertices})" },
		{ "trigger" : "axlGRPDrwMapWindow" , "contents" : "axlGRPDrwMapWindow(${1:r_graphics} ${2:x_hgt} ${3:x_width})" },
		{ "trigger" : "axlGRPDrwPoly" , "contents" : "axlGRPDrwPoly(${1:r_graphics} ${2:l_vertices})" },
		{ "trigger" : "axlGRPDrwRectangle" , "contents" : "axlGRPDrwRectangle(${1:r_graphics} ${2:l_upper_left} ${3:l_lower_right})" },
		{ "trigger" : "axlGRPDrwText" , "contents" : "axlGRPDrwText(${1:r_graphics} ${2:l_origin} ${3:t_text})" },
		{ "trigger" : "axlGRPDrwUpdate" , "contents" : "axlGRPDrwUpdate(${1:r_graphics})" },
		{ "trigger" : "axlHighlightObject" , "contents" : "axlHighlightObject(${1:[lo_dbid]} ${2:[g_permHighlight]})" },
		{ "trigger" : "axlHttp" , "contents" : "axlHttp(${1:t_url})" },
		{ "trigger" : "axlImpdedanceGetLayerBroadsideDPImp" , "contents" : "axlImpdedanceGetLayerBroadsideDPImp(${1:t_layer1/x_layerNum1} ${2:t_layer2/x_layerNum2} ${3:f_width})" },
		{ "trigger" : "axlImpdedanceGetLayerBroadsideDPWidth" , "contents" : "axlImpdedanceGetLayerBroadsideDPWidth(${1:t_layer1/x_layerNum1} ${2:t_layer2/x_layerNum2} ${3:f_diffImpedance})" },
		{ "trigger" : "axlImpdedanceGetLayerEdgeDPImp" , "contents" : "axlImpdedanceGetLayerEdgeDPImp(${1:t_layer/x_layerNum} ${2:f_spacing} ${3:f_width})" },
		{ "trigger" : "axlImpdedanceGetLayerEdgeDPSpacing" , "contents" : "axlImpdedanceGetLayerEdgeDPSpacing(${1:t_layer/x_layerNum} ${2:f_width} ${3:f_diffImp})" },
		{ "trigger" : "axlImpdedanceGetLayerEdgeDPWidth" , "contents" : "axlImpdedanceGetLayerEdgeDPWidth(${1:t_layer/x_layerNum} ${2:f_spacing} ${3:f_diffImp})" },
		{ "trigger" : "axlImpedance2Width" , "contents" : "axlImpedance2Width(${1:t_layer/x_layerNum} ${2:f_impedance})" },
		{ "trigger" : "axlIsAttachment" , "contents" : "axlIsAttachment(${1:o_attachment})" },
		{ "trigger" : "axlIsCustomColored" , "contents" : "axlIsCustomColored(${1:o_dbid})" },
		{ "trigger" : "axlIsDBIDType" , "contents" : "axlIsDBIDType(${1:g_dbid})" },
		{ "trigger" : "axlIsDebug" , "contents" : "axlIsDebug()" },
		{ "trigger" : "axlIsDummyNet" , "contents" : "axlIsDummyNet(${1:net_dbid})" },
		{ "trigger" : "axlIsFormType" , "contents" : "axlIsFormType(${1:g_form})" },
		{ "trigger" : "axlIsGridCellType" , "contents" : "axlIsGridCellType(${1:r_cell})" },
		{ "trigger" : "axlIsHighlighted" , "contents" : "axlIsHighlighted(${1:o_dbid})" },
		{ "trigger" : "axlIsitFill" , "contents" : "axlIsitFill(${1:t_layer})" },
		{ "trigger" : "axlIsLayer" , "contents" : "axlIsLayer(${1:t_layer})" },
		{ "trigger" : "axlIsLayerNegative" , "contents" : "axlIsLayerNegative(${1:t_layerName})" },
		{ "trigger" : "axlIsPinUnused" , "contents" : "axlIsPinUnused(${1:pin_dbid})" },
		{ "trigger" : "axlIsPointInsideBox" , "contents" : "axlIsPointInsideBox(${1:l_point} ${2:l_box})" },
		{ "trigger" : "axlIsPointOnLine" , "contents" : "axlIsPointOnLine(${1:l_point} ${2:ll_line})" },
		{ "trigger" : "axlIsPolyType" , "contents" : "axlIsPolyType(${1:g_polygon})" },
		{ "trigger" : "axlIsPolyType" , "contents" : "axlIsPolyType(${1:poly})" },	             
		{ "trigger" : "axlIsPolyType" , "contents" : "axlIsPolyType(${1:cline_dbid})" },	              
		{ "trigger" : "axlIsProductLineActive" , "contents" : "axlIsProductLineActive(${1:t_productLine})" },	              
		{ "trigger" : "axlIsProtectAlias" , "contents" : "axlIsProtectAlias(${1:t_alias})" },
		{ "trigger" : "axlIsViewFileType" , "contents" : "axlIsViewFileType(${1:g_userType})" },
		{ "trigger" : "axlIsViewFileType" , "contents" : "axlIsViewFileType(${1:logWindow})" },	            
		{ "trigger" : "axlIsVisibleLayer" , "contents" : "axlIsVisibleLayer(${1:t_layer})" },
		{ "trigger" : "axlKillDesign" , "contents" : "axlKillDesign()" },
		{ "trigger" : "axlLastPick" , "contents" : "axlLastPick(${1:l_mode})" },
		{ "trigger" : "axlLastPickIsSnapped" , "contents" : "axlLastPickIsSnapped()" },
		{ "trigger" : "axlLayerCreateCrossSection" , "contents" : "axlLayerCreateCrossSection(${1:t_Prev_layerName} ${2:t_layerType} ${3:t_materialType} ${4:[t_subclassName]} ${5:[t_planeType]})" },
		{ "trigger" : "axlLayerCreateNonConductor" , "contents" : "axlLayerCreateNonConductor(${1:t_layerName})" },
		{ "trigger" : "axlLayerGet" , "contents" : "axlLayerGet(${1:t_layer})" },
		{ "trigger" : "axlLayerGetGet" , "contents" : "axlLayerGetGet ${1:layer} ${2:(} ${3:class/subclass})" },	            
		{ "trigger" : "axlLayerPriorityClearAll" , "contents" : "axlLayerPriorityClearAll()" },
		{ "trigger" : "axlLayerPriorityRestoreAll" , "contents" : "axlLayerPriorityRestoreAll()" },
		{ "trigger" : "axlLayerPrioritySaveAll" , "contents" : "axlLayerPrioritySaveAll()" },
		{ "trigger" : "axlLayerPrioritySet" , "contents" : "axlLayerPrioritySet(${1:t_layer} ${2:x_priority})" },
		{ "trigger" : "axlLayerPrioritySet" , "contents" : "axlLayerPrioritySet()" },
		{ "trigger" : "axlLayerSet" , "contents" : "axlLayerSet(${1:o_dbid})" },
		{ "trigger" : "axlLayerSet" , "contents" : "axlLayerSet(${1:q})" },	              
		{ "trigger" : "axlLineSlope" , "contents" : "axlLineSlope(${1:ll_line})" },
		{ "trigger" : "axlLineXLine" , "contents" : "axlLineXLine(${1:l_seg1} ${2:l_seg2})" },
		{ "trigger" : "axlLoadPadstack" , "contents" : "axlLoadPadstack(${1:t_padname})" },
		{ "trigger" : "axlLoadSymbol" , "contents" : "axlLoadSymbol(${1:t_symKind} ${2:t_symName})" },
		{ "trigger" : "axlLogHeader" , "contents" : "axlLogHeader(${1:p_port} ${2:t_titleString} ${3:[t_prefix]})" },
		{ "trigger" : "axlMakeDynamicsPath" , "contents" : "axlMakeDynamicsPath(${1:l_formatedList})" },
		{ "trigger" : "axlMapClassName" , "contents" : "axlMapClassName(${1:t_oldName} ${2:[g_mapToPCB]})" },
		{ "trigger" : "axlMatchGroupAdd" , "contents" : "axlMatchGroupAdd(${1:o_mgdbid/t_mgName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlMatchGroupAdd" , "contents" : "axlMatchGroupAdd(${1:mg} ${2:nets})" },	             
		{ "trigger" : "axlMatchGroupCreate" , "contents" : "axlMatchGroupCreate(${1:t_name})" },
		{ "trigger" : "axlMatchGroupDelete" , "contents" : "axlMatchGroupDelete(${1:o_mgdbid/t_mgName})" },
		{ "trigger" : "axlMatchGroupDelete" , "contents" : "axlMatchGroupDelete(${1:mg})" },	              
		{ "trigger" : "axlMatchGroupProp" , "contents" : "axlMatchGroupProp(${1:o_mgdbid/t_mgName} ${2:o_dbid} ${3:t_value/nil})" },
		{ "trigger" : "axlMatchGroupRemove" , "contents" : "axlMatchGroupRemove(${1:o_mgdbid/t_mgName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlMemSize" , "contents" : "axlMemSize()" },
		{ "trigger" : "axlMeterCreate" , "contents" : "axlMeterCreate(${1:t_title} ${2:t_infoString} ${3:g_enableCancel} ${4:[t_formname]} ${5:[t_infoString2]} ${6:[g_formCallback]})" },
		{ "trigger" : "axlMeterDestroy" , "contents" : "axlMeterDestroy()" },
		{ "trigger" : "axlMeterIsCancelled" , "contents" : "axlMeterIsCancelled()" },
		{ "trigger" : "axlMeterUpdate" , "contents" : "axlMeterUpdate(${1:x_percentDone} ${2:t_infoString} ${3:[t_infoStr2]})" },
		{ "trigger" : "axlMiniStatusLoad" , "contents" : "axlMiniStatusLoad(${1:s_formHandle} ${2:t_formFile} ${3:g_formAction} ${4:[g_StringOption]} ${5:[t_restrict]})" },
		{ "trigger" : "axlMKS2UU" , "contents" : "axlMKS2UU(${1:t_mksString})" },
		{ "trigger" : "axlMKSalias" , "contents" : "axlMKSalias(${1:t_MKSAlias})" },
		{ "trigger" : "axlMKSConvert" , "contents" : "axlMKSConvert(${1:n_input} ${2:t_inUnits} ${3:[t_outUnits]})" },
		{ "trigger" : "axlMKSConvert" , "contents" : "axlMKSConvert(${1:t_input} ${2:[t_outUnits]})" },
		{ "trigger" : "axlMKSConvert" , "contents" : "axlMKSConvert(${1:nil} ${2:[t_outUnits]})" },
		{ "trigger" : "axlMKSConvert" , "contents" : "axlMKSConvert(${1:n_input})" },
		{ "trigger" : "axlMKSStr2UU" , "contents" : "axlMKSStr2UU(${1:t_String})" },
		{ "trigger" : "axlMPythag" , "contents" : "axlMPythag(${1:l_pt1} ${2:l_pt2})" },
		{ "trigger" : "axlMsgCancelPrint" , "contents" : "axlMsgCancelPrint()" },
		{ "trigger" : "axlMsgCancelSeen" , "contents" : "axlMsgCancelSeen()" },
		{ "trigger" : "axlMsgClear" , "contents" : "axlMsgClear(${1:and} ${2:Test/Set})" },
		{ "trigger" : "axlMsgClear" , "contents" : "axlMsgClear()" },
		{ "trigger" : "axlMsgContextClear" , "contents" : "axlMsgContextClear(${1:r_context})" },
		{ "trigger" : "axlMsgContextClear" , "contents" : "axlMsgContextClear(${1:context})" },	              
		{ "trigger" : "axlMsgContextFinish" , "contents" : "axlMsgContextFinish(${1:context})" },	              
		{ "trigger" : "axlMsgContextFinish" , "contents" : "axlMsgContextFinish(${1:r_context})" },
		{ "trigger" : "axlMsgContextGet" , "contents" : "axlMsgContextGet(${1:r_context})" },
		{ "trigger" : "axlMsgContextGetString" , "contents" : "axlMsgContextGetString(${1:r_context})" },
		{ "trigger" : "axlMsgContextGetString" , "contents" : "axlMsgContextGetString(${1:context})" },	              
		{ "trigger" : "axlMsgContextInBuf" , "contents" : "axlMsgContextInBuf(${1:r_context} ${2:t_format_string})" },
		{ "trigger" : "axlMsgContextPrint" , "contents" : "axlMsgContextPrint(${1:context})" },	              
		{ "trigger" : "axlMsgContextPrint" , "contents" : "axlMsgContextPrint(${1:r_context})" },
		{ "trigger" : "axlMsgContextRemove" , "contents" : "axlMsgContextRemove(${1:r_context} ${2:t_format_string})" },
		{ "trigger" : "axlMsgContextStart" , "contents" : "axlMsgContextStart(${1:g_format_string} ${2:[g_arg1} ${3:...]})" },
		{ "trigger" : "axlMsgContextTest" , "contents" : "axlMsgContextTest(${1:r_context})" },
		{ "trigger" : "axlMsgPut" , "contents" : "axlMsgPut()" },
		{ "trigger" : "axlMsgSet" , "contents" : "axlMsgSet(${1:x_class})" },
		{ "trigger" : "axlMsgSet" , "contents" : "axlMsgSet(${1:level})" },	              
		{ "trigger" : "axlMsgTest" , "contents" : "axlMsgTest()" },
		{ "trigger" : "axlMUniVector" , "contents" : "axlMUniVector(${1:l_pt1} ${2:l_pt2} ${3:[f_length]})" },
		{ "trigger" : "axlMXYAdd" , "contents" : "axlMXYAdd(${1:l_pt1} ${2:l_pt2})" },
		{ "trigger" : "axlMXYMult" , "contents" : "axlMXYMult(${1:l_uniVec} ${2:f_factor} ${3:[l_origin]})" },
		{ "trigger" : "axlMXYSub" , "contents" : "axlMXYSub(${1:l_pt1} ${2:l_pt2})" },
		{ "trigger" : "axlNetClassAdd" , "contents" : "axlNetClassAdd(${1:o_netclassdbid/t_netclassName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlNetClassCreate" , "contents" : "axlNetClassCreate(${1:t_name} ${2:g_domain/lg_domain})" },
		{ "trigger" : "axlNetClassDelete" , "contents" : "axlNetClassDelete(${1:o_netclassdbid/t_netclassName/lg_netclassdbid})" },
		{ "trigger" : "axlNetClassGet" , "contents" : "axlNetClassGet(${1:o_dbid} ${2:s_domain} ${3:g_hierarchal})" },
		{ "trigger" : "axlNetClassRemove" , "contents" : "axlNetClassRemove(${1:o_netclassdbid/t_netclassName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlNetEcsetValueGet" , "contents" : "axlNetEcsetValueGet(${1:o_itemDbid/t_netName} ${2:t_cnsName/s_name})" },
		{ "trigger" : "axlNetSched" , "contents" : "axlNetSched()" },
		{ "trigger" : "axlOK2Void" , "contents" : "axlOK2Void(${1:t_layer})" },
		{ "trigger" : "axlOKToProceed" , "contents" : "axlOKToProceed()" },
		{ "trigger" : "axlOpenDesign" , "contents" : "axlOpenDesign(${1:?design} ${2:t_design} ${3:?mode} ${4:t_mode} ${5:?noMru} ${6:g_noMru})" },
		{ "trigger" : "axlOpenDesignForBatch" , "contents" : "axlOpenDesignForBatch(${1:?design} ${2:t_design} ${3:?mode} ${4:t_mode})" },
		{ "trigger" : "axlOpenFindFilter" , "contents" : "axlOpenFindFilter()" },
		{ "trigger" : "axlOSFileCopy" , "contents" : "axlOSFileCopy(${1:t_src} ${2:t_dest} ${3:g_append})" },
		{ "trigger" : "axlOSFileMove" , "contents" : "axlOSFileMove(${1:t_src} ${2:t__dest})" },
		{ "trigger" : "axlOSSlash" , "contents" : "axlOSSlash(${1:t_directory})" },
		{ "trigger" : "axlPadstackSetType" , "contents" : "axlPadstackSetType(${1:o_padstack/t_padstack} ${2:g_uviaBbvia})" },
		{ "trigger" : "axlPadstackToDisk" , "contents" : "axlPadstackToDisk(${1:[t_padName]} ${2:[t_outPadName]})" },
		{ "trigger" : "axlPadstackToDisk" , "contents" : "axlPadstackToDisk()" },
		{ "trigger" : "axlPathArcAngle" , "contents" : "axlPathArcAngle(${1:r_path} ${2:f_width} ${3:l_end_point} ${4:g_clockwise} ${5:f_angle})" },
		{ "trigger" : "axlPathArcCenter" , "contents" : "axlPathArcCenter(${1:r_path} ${2:f_width} ${3:l_end_point} ${4:g_clockwise} ${5:l_center})" },
		{ "trigger" : "axlPathArcRadius" , "contents" : "axlPathArcRadius(${1:r_path} ${2:f_width} ${3:l_end_point} ${4:g_clockwise} ${5:g_bigarc} ${6:f_radius})" },
		{ "trigger" : "axlPathGetLastPathSeg" , "contents" : "axlPathGetLastPathSeg(${1:r_path})" },
		{ "trigger" : "axlPathGetPathSegs" , "contents" : "axlPathGetPathSegs(${1:r_path})" },
		{ "trigger" : "axlPathGetWidth" , "contents" : "axlPathGetWidth(${1:r_path})" },
		{ "trigger" : "axlPathGetWidth" , "contents" : "axlPathGetWidth(${1:path})" },	              
		{ "trigger" : "axlPathLine" , "contents" : "axlPathLine(${1:r_path} ${2:f_width} ${3:l_end_point})" },
		{ "trigger" : "axlPathOffset" , "contents" : "axlPathOffset(${1:r_path} ${2:xy})" },
		{ "trigger" : "axlPathSegGetArcCenter" , "contents" : "axlPathSegGetArcCenter(${1:r_pathSeg})" },
		{ "trigger" : "axlPathSegGetArcCenter" , "contents" : "axlPathSegGetArcCenter(${1:lastSeg})" },	              
		{ "trigger" : "axlPathSegGetArcClockwise" , "contents" : "axlPathSegGetArcClockwise(${1:r_pathSeg})" },
		{ "trigger" : "axlPathSegGetArcClockwise" , "contents" : "axlPathSegGetArcClockwise(${1:lastSeg})" },	              
		{ "trigger" : "axlPathSegGetEndPoint" , "contents" : "axlPathSegGetEndPoint(${1:r_pathSeg})" },
		{ "trigger" : "axlPathSegGetEndPoint" , "contents" : "axlPathSegGetEndPoint(${1:lastSeg})" },	              
		{ "trigger" : "axlPathSegGetWidth" , "contents" : "axlPathSegGetWidth(${1:r_pathSeg})" },
		{ "trigger" : "axlPathSegGetWidth" , "contents" : "axlPathSegGetWidth(${1:lastSeg})" },	              
		{ "trigger" : "axlPathStart" , "contents" : "axlPathStart(${1:l_points} ${2:[f_width]})" },
		{ "trigger" : "axlPathStartCircle" , "contents" : "axlPathStartCircle(${1:l_location} ${2:f_width})" },
		{ "trigger" : "axlPdfView" , "contents" : "axlPdfView(${1:t_pdfFile})" },
		{ "trigger" : "axlPinPair" , "contents" : "axlPinPair(${1:o_pin1/t_pin1} ${2:[o_pin2/t_pin2]})" },
		{ "trigger" : "axlPinPairSeek" , "contents" : "axlPinPairSeek(${1:o_pin1} ${2:o_pin2})" },
		{ "trigger" : "axlPinsOfNet" , "contents" : "axlPinsOfNet(${1:o_net/t_net} ${2:g_mode})" },
		{ "trigger" : "AXLPluginEntry" , "contents" : "AXLPluginEntry(${1:argv})" },	              
		{ "trigger" : "axlPolyErrorGet" , "contents" : "axlPolyErrorGet()" },
		{ "trigger" : "axlPolyExpand" , "contents" : "axlPolyExpand(${1:o_polygon1/lo_polygon1} ${2:f_expandValue} ${3:s_expandType})" },
		{ "trigger" : "axlPolyFromDB" , "contents" : "axlPolyFromDB(${1:o_dbid/r_path} ${2:?endCapType} ${3:s_endCapType} ${4:?layer} ${5:t_layer} ${6:?padType} ${7:s_padType} ${8:?holes} ${9:t/nil})" },
		{ "trigger" : "axlPolyFromHole" , "contents" : "axlPolyFromHole(${1:o_polygon})" },
		{ "trigger" : "axlPolyMemUse" , "contents" : "axlPolyMemUse()" },
		{ "trigger" : "axlPolyOffset" , "contents" : "axlPolyOffset(${1:o_polygon/lo_polygon} ${2:l_xy} ${3:[g_copy]})" },
		{ "trigger" : "axlPolyOperation" , "contents" : "axlPolyOperation(${1:o_polygon1/lo_polygon1} ${2:o_polygon2/lo_polygon2} ${3:s_operation})" },
		{ "trigger" : "axlPPrint" , "contents" : "axlPPrint(${1:t_name})" },
		{ "trigger" : "axlProtectAlias" , "contents" : "axlProtectAlias(${1:t_alias} ${2:t/nil})" },
		{ "trigger" : "axlPurgePadstack" , "contents" : "axlPurgePadstack(${1:S_mode} ${2:t/nil})" },
		{ "trigger" : "axlRatsnestBlank" , "contents" : "axlRatsnestBlank(${1:rd_net})" },
		{ "trigger" : "axlRatsnestDisplay" , "contents" : "axlRatsnestDisplay(${1:rd_net})" },
		{ "trigger" : "axlReadOnlyVariable" , "contents" : "axlReadOnlyVariable(${1:t_variable} ${2:[g_Enable]})" },
		{ "trigger" : "axlReadOnlyVariable" , "contents" : "axlReadOnlyVariable(${1:nil})" },	              
		{ "trigger" : "axlRecursiveDelete" , "contents" : "axlRecursiveDelete(${1:t_directory})" },
		{ "trigger" : "axlRegexpIs" , "contents" : "axlRegexpIs(${1:t_exp})" },
		{ "trigger" : "axlRegionAdd" , "contents" : "axlRegionAdd(${1:o_regiondbid/t_regionName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlRegionCreate" , "contents" : "axlRegionCreate(${1:t_name})" },
		{ "trigger" : "axlRegionDelete" , "contents" : "axlRegionDelete(${1:o_regiondbid/t_regionName/lg_regiondbid})" },
		{ "trigger" : "axlRegionRemove" , "contents" : "axlRegionRemove(${1:o_regiondbid/t_regionName} ${2:o_dbid/lo_dbid})" },
		{ "trigger" : "axlRemoveNet" , "contents" : "axlRemoveNet(${1:t_name})" },
		{ "trigger" : "axlRemoveNet" , "contents" : "axlRemoveNet(${1:o_dbid})" },
		{ "trigger" : "axlRenameDesign" , "contents" : "axlRenameDesign(${1:t_design})" },
		{ "trigger" : "axlRenameNet" , "contents" : "axlRenameNet(${1:t_old_name} ${2:t_new_name})" },
		{ "trigger" : "axlRenameNet" , "contents" : "axlRenameNet(${1:o_dbid} ${2:t_new_name})" },
		{ "trigger" : "axlRenameRefdes" , "contents" : "axlRenameRefdes(${1:t_old_name/o_oldCompDbid} ${2:t_new_name/o_newCompDbid})" },
		{ "trigger" : "axlRenameRefdes" , "contents" : "axlRenameRefdes(${1:firstComp} ${2:secondComp})" },	             
		{ "trigger" : "axlReplacePadstack" , "contents" : "axlReplacePadstack(${1:o_dbid} ${2:/lo_dbid} ${3:o_padstackdbid/t_padname})" },
		{ "trigger" : "axlReportList" , "contents" : "axlReportList()" },
		{ "trigger" : "axlReportRegister" , "contents" : "axlReportRegister()" },
		{ "trigger" : "axlReportRegister" , "contents" : "axlReportRegister(${1:g_reportCallback} ${2:t_description} ${3:t_title})" },
		{ "trigger" : "axlRunBatchDBProgram" , "contents" : "axlRunBatchDBProgram(${1:t_prog} ${2:t_cmdFmt} ${3:[?logfilet_logfile]} ${4:[?startMsgt_startMsg]} ${5:[?reloadDBt/nil]} ${6:[?noUnloadt/nil]} ${7:[?silentt/nil]} ${8:[?noProgress} ${9:t/nil]} ${10:[?warnProgram} ${11:t/nil]})" },
		{ "trigger" : "axlSaveDesign" , "contents" : "axlSaveDesign(${1:?design} ${2:t_design} ${3:?mode} ${4:t_option} ${5:?noMru} ${6:g_noMru})" },
		{ "trigger" : "axlSaveEnable" , "contents" : "axlSaveEnable(${1:[g_saveEnable]})" },
		{ "trigger" : "axlSchedule" , "contents" : "axlSchedule(${1:o_net/t_net} ${2:[g_userSchedule]})" },
		{ "trigger" : "axlScheduleNet" , "contents" : "axlScheduleNet(${1:o_net/t_net} ${2:t_schedule/nil})" },
		{ "trigger" : "axlSegDelayAndZ0" , "contents" : "axlSegDelayAndZ0(${1:o_clineSegDbid})" },
		{ "trigger" : "axlSelect" , "contents" : "axlSelect(${1:?firstEventCallbacks_callback} ${2:?groupModet/nil} ${3:?promptt_prompt})" },
		{ "trigger" : "axlSelect" , "contents" : "axlSelect()" },
		{ "trigger" : "axlSelectByName" , "contents" : "axlSelectByName(${1:t_objectType} ${2:t_name} ${3:/lt_name} ${4:[g_wildcard]})" },
		{ "trigger" : "axlSelectByProperty" , "contents" : "axlSelectByProperty(${1:t_objectType} ${2:t_property} ${3:[t_value]} ${4:[g_regularExpression]})" },
		{ "trigger" : "axlSetActiveLayer" , "contents" : "axlSetActiveLayer(${1:t_layer})" },
		{ "trigger" : "axlSetAlias" , "contents" : "axlSetAlias(${1:t_alias} ${2:g_value})" },
		{ "trigger" : "axlSetAttachment" , "contents" : "axlSetAttachment(${1:o_attachment} ${2:[t_password]})" },
		{ "trigger" : "axlSetDefaultDieInformation" , "contents" : "axlSetDefaultDieInformation(${1:comp})" },	              
		{ "trigger" : "axlSetDieData" , "contents" : "axlSetDieData(${1:g_dieId} ${2:s_dataType} ${3:g_newValue})" },
		{ "trigger" : "axlSetDynamicsMirror" , "contents" : "axlSetDynamicsMirror(${1:g_mirror})" },
		{ "trigger" : "axlSetDynamicsMirror" , "contents" : "axlSetDynamicsMirror(${1:t})" },	              
		{ "trigger" : "axlSetDynamicsRotation" , "contents" : "axlSetDynamicsRotation(${1:f_angle/nil})" },
		{ "trigger" : "axlSetFindFilter" , "contents" : "axlSetFindFilter(${1:?enabled} ${2:lt_enabled} ${3:?onButtonslt_filterOn})" },
		{ "trigger" : "axlSetFunckey" , "contents" : "axlSetFunckey(${1:_alias} ${2:g_value})" },
		{ "trigger" : "axlSetIposerData" , "contents" : "axlSetIposerData(${1:g_iposerId} ${2:s_dataType} ${3:g_newValue})" },
		{ "trigger" : "axlSetLineLock" , "contents" : "axlSetLineLock(${1:?arcEnableg_arcEnable} ${2:?lockAnglef_lockAngle} ${3:?minRadiusf_minRadius} ${4:?length45f_length45} ${5:?fixed45} ${6:g_fixed45} ${7:?lengthRadius} ${8:f_lengthRadius} ${9:?fixedRadiusg_fixedRadius} ${10:?lockTangentg_lockTangent})" },
		{ "trigger" : "axlSetLineLock" , "contents" : "axlSetLineLock(${1:?arcEnable} ${2:t} ${3:?lockAngle} ${4:90} ${5:?fixedRadius} ${6:t} ${7:?lengthRadius} ${8:50})" },	       
		{ "trigger" : "axlSetParam" , "contents" : "axlSetParam(${1:p})" },	              
		{ "trigger" : "axlSetParam" , "contents" : "axlSetParam(${1:o_paramDbid})" },
		{ "trigger" : "axlSetPlaneType" , "contents" : "axlSetPlaneType(${1:t_subclassName} ${2:t_planeType})" },
		{ "trigger" : "axlSetRotateIncrement" , "contents" : "axlSetRotateIncrement(${1:?angular} ${2:f_angular} ${3:?radialf_radial})" },
		{ "trigger" : "axlSetSpacerData" , "contents" : "axlSetSpacerData(${1:g_spacerId} ${2:s_dataType} ${3:g_newValue})" },
		{ "trigger" : "axlSetSymbolType" , "contents" : "axlSetSymbolType(${1:t_symbolType})" },
		{ "trigger" : "axlSetVariable" , "contents" : "axlSetVariable(${1:t_variable/lt_variable} ${2:[g_value]})" },
		{ "trigger" : "axlSetWireProfileColor" , "contents" : "axlSetWireProfileColor(${1:t_profile} ${2:n_color})" },	             
		{ "trigger" : "axlSetWireProfileVisible" , "contents" : "axlSetWireProfileVisible(${1:t_profile} ${2:g_visible})" },	             
		{ "trigger" : "axlShapeAutoVoid" , "contents" : "axlShapeAutoVoid(${1:o_shapeId} ${2:[s_options/ls_options]})" },
		{ "trigger" : "axlShapeAutoVoid" , "contents" : "axlShapeAutoVoid(${1:o_shapeId/o_voidId/lo_voidid})" },
		{ "trigger" : "axlShapeChangeDynamicType" , "contents" : "axlShapeChangeDynamicType(${1:o_shapeId} ${2:g_dynamic} ${3:g_msgs})" },
		{ "trigger" : "axlShapeDeleteVoids" , "contents" : "axlShapeDeleteVoids(${1:shp})" },	              
		{ "trigger" : "axlShapeDeleteVoids" , "contents" : "axlShapeDeleteVoids(${1:p})" },	              
		{ "trigger" : "axlShapeDynamicUpdate" , "contents" : "axlShapeDynamicUpdate(${1:o_shapeDbid/nil} ${2:g_force})" },
		{ "trigger" : "axlShapeDynamicUpdate" , "contents" : "axlShapeDynamicUpdate(${1:nil} ${2:nil})" },	             
		{ "trigger" : "axlShapeMerge" , "contents" : "axlShapeMerge(${1:o_shapeId} ${2:lo_shapes} ${3:g_options/lg_options})" },
		{ "trigger" : "axlShapeRaisePriority" , "contents" : "axlShapeRaisePriority(${1:o_shapeId})" },
		{ "trigger" : "axlShapeRaisePriority" , "contents" : "axlShapeRaisePriority(${1:shape})" },	              
		{ "trigger" : "axlShell" , "contents" : "axlShell(${1:t_command})" },
		{ "trigger" : "axlShellPost" , "contents" : "axlShellPost(${1:t_command})" },
		{ "trigger" : "axlShoveItems" , "contents" : "axlShoveItems(${1:l_itemList})" },
		{ "trigger" : "axlShoveSetParams" , "contents" : "axlShoveSetParams(${1:l_params})" },
		{ "trigger" : "axlShoveSetParams" , "contents" : "axlShoveSetParams(${1:params})" },	              
		{ "trigger" : "axlShowObject" , "contents" : "axlShowObject(${1:lud_dbid})" },
		{ "trigger" : "axlShowObjectToFile" , "contents" : "axlShowObjectToFile(${1:lo_dbid} ${2:[t_file_name]})" },
		{ "trigger" : "axlSingleSelectBox" , "contents" : "axlSingleSelectBox(${1:[l_bBox]})" },
		{ "trigger" : "axlSingleSelectName" , "contents" : "axlSingleSelectName(${1:t_nameType} ${2:l_names} ${3:[g_wildcard]})" },
		{ "trigger" : "axlSingleSelectObject" , "contents" : "axlSingleSelectObject(${1:lo_dbid})" },
		{ "trigger" : "axlSingleSelectPoint" , "contents" : "axlSingleSelectPoint(${1:[l_point]})" },
		{ "trigger" : "axlSleep" , "contents" : "axlSleep(${1:x_time})" },
		{ "trigger" : "axlSmoothDesign" , "contents" : "axlSmoothDesign(${1:lx_numPasses})" },
		{ "trigger" : "axlSmoothItems" , "contents" : "axlSmoothItems(${1:lo_clineList})" },
		{ "trigger" : "axlSmoothSetParams" , "contents" : "axlSmoothSetParams(${1:l_params})" },
		{ "trigger" : "axlSnapToObject" , "contents" : "axlSnapToObject(${1:g_mode} ${2:xy})" },
		{ "trigger" : "axlSort" , "contents" : "axlSort(${1:t_infile} ${2:t_outfile} ${3:[t_sortfields]} ${4:[t_sort_options]})" },
		{ "trigger" : "axlStrcmpAlpNum" , "contents" : "axlStrcmpAlpNum(${1:t_str1} ${2:t_str2})" },
		{ "trigger" : "axlSubclasses" , "contents" : "axlSubclasses(${1:t_class} ${2:?field} ${3:s_name} ${4:?value} ${5:g_value})" },
		{ "trigger" : "axlSubclassFormPopup" , "contents" : "axlSubclassFormPopup(${1:r_form} ${2:t_field} ${3:t_class} ${4:nil/lt_subclass})" },
		{ "trigger" : "axlSubclassRoute" , "contents" : "axlSubclassRoute(${1:?field} ${2:s_name} ${3:?value} ${4:g_value})" },
		{ "trigger" : "axlSubclassRoute" , "contents" : "axlSubclassRoute()" },
		{ "trigger" : "axlSubSelectAll" , "contents" : "axlSubSelectAll()" },
		{ "trigger" : "axlSubSelectBox" , "contents" : "axlSubSelectBox(${1:[l_bBox]})" },
		{ "trigger" : "axlSubSelectName" , "contents" : "axlSubSelectName(${1:t_nameType} ${2:l_names})" },
		{ "trigger" : "axlSubSelectObject" , "contents" : "axlSubSelectObject(${1:lo_dbid})" },
		{ "trigger" : "axlSubSelectPoint" , "contents" : "axlSubSelectPoint(${1:[l_point]})" },
		{ "trigger" : "axlTechnologyType" , "contents" : "axlTechnologyType()" },
		{ "trigger" : "axlTempDirectory" , "contents" : "axlTempDirectory()" },
		{ "trigger" : "axlTempFile" , "contents" : "axlTempFile(${1:g_option})" },
		{ "trigger" : "axlTempFile" , "contents" : "axlTempFile(${1:[g_local]})" },
		{ "trigger" : "axlTempFileRemove" , "contents" : "axlTempFileRemove(${1:t_filename})" },
		{ "trigger" : "axlTestPoint" , "contents" : "axlTestPoint(${1:o_dbid} ${2:top|bottom|nil})" },
		{ "trigger" : "axlTextOrientationCopy" , "contents" : "axlTextOrientationCopy(${1:o_textDbid} ${2:[orient]})" },
		{ "trigger" : "axlTransformObject" , "contents" : "axlTransformObject(${1:lo_dbid/o_dbid} ${2:?move} ${3:l_deltaPoint} ${4:?mirror} ${5:t/nil} ${6:?angle} ${7:f_angle} ${8:?origin} ${9:l_rotatePoint} ${10:?allOrNone} ${11:t/nil})" },	    
		{ "trigger" : "axlTriggerClear" , "contents" : "axlTriggerClear(${1:s_trigger} ${2:s_function})" },
		{ "trigger" : "axlTriggerPrint" , "contents" : "axlTriggerPrint()" },
		{ "trigger" : "axlTriggerSet" , "contents" : "axlTriggerSet(${1:s_trigger} ${2:s_function})" },
		{ "trigger" : "axlTriggerSet" , "contents" : "axlTriggerSet(${1:nil} ${2:nil})" },
		{ "trigger" : "axlUICmdPopupSet" , "contents" : "axlUICmdPopupSet(${1:r_popup})" },
		{ "trigger" : "axlUIColorDialog" , "contents" : "axlUIColorDialog(${1:r_window/nil} ${2:l_rgb})" },
		{ "trigger" : "axlUIConfirm" , "contents" : "axlUIConfirm(${1:t_message} ${2:[s_level]})" },
		{ "trigger" : "axlUIControl" , "contents" : "axlUIControl(${1:s_name} ${2:[g_value]})" },
		{ "trigger" : "axlUIDataBrowse" , "contents" : "axlUIDataBrowse(${1:s_dataType} ${2:ls_options} ${3:t_title} ${4:g_sorted} ${5:[t_helpTag]} ${6:[l_callback]} ${7:[g_args]})" },
		{ "trigger" : "axlUIDisableQuit" , "contents" : "axlUIDisableQuit(${1:o_window})" },
		{ "trigger" : "axlUIEditFile" , "contents" : "axlUIEditFile(${1:t_filename} ${2:t_title/nil} ${3:g_block})" },
		{ "trigger" : "axlUIGetUserData" , "contents" : "axlUIGetUserData()" },
		{ "trigger" : "axlUIMenuDebug" , "contents" : "axlUIMenuDebug(${1:[g_option]})" },
		{ "trigger" : "axlUIMenuDelete" , "contents" : "axlUIMenuDelete(${1:x_menuId})" },
		{ "trigger" : "axlUIMenuDump" , "contents" : "axlUIMenuDump(${1:t_MenuFile})" },
		{ "trigger" : "axlUIMenuFind" , "contents" : "axlUIMenuFind(${1:x_menuId/nil} ${2:t_cmdName/x_location} ${3:[g_menuOption]})" },
		{ "trigger" : "axlUIMenuInsert" , "contents" : "axlUIMenuInsert(${1:x_menuId} ${2:t_display} ${3:t_command})" },
		{ "trigger" : "axlUIMenuInsert" , "contents" : "axlUIMenuInsert(${1:x_menuId} ${2:ll_items})" },
		{ "trigger" : "axlUIMenuLoad" , "contents" : "axlUIMenuLoad(${1:t_menufile})" },
		{ "trigger" : "axlUIMenuRegister" , "contents" : "axlUIMenuRegister(${1:t_command/x_location} ${2:ll_menu} ${3:[g_menuOption]})" },
		{ "trigger" : "axlUIMultipleChoice" , "contents" : "axlUIMultipleChoice(${1:t_question} ${2:lt_answers} ${3:[t_title]})" },
		{ "trigger" : "axlUIPopup" , "contents" : "axlUIPopup(${1:nil})" },	              
		{ "trigger" : "axlUIPopupDefine" , "contents" : "axlUIPopupDefine(${1:r_popup} ${2:ts_pairs})" },
		{ "trigger" : "axlUIPopupSet" , "contents" : "axlUIPopupSet(${1:mypopup})" },	              
		{ "trigger" : "axlUIPopupSet" , "contents" : "axlUIPopupSet(${1:nil})" },	              
		{ "trigger" : "axlUIPopupSet" , "contents" : "axlUIPopupSet(${1:newpopup})" },	              
		{ "trigger" : "axlUIPopupSet" , "contents" : "axlUIPopupSet(${1:r_popup})" },
		{ "trigger" : "axlUIPopupSet" , "contents" : "axlUIPopupSet(${1:popid})" },	              
		{ "trigger" : "axlUIPrompt" , "contents" : "axlUIPrompt(${1:t_message} ${2:[t_default]/'password})" },
		{ "trigger" : "axlUIViewFileCreate" , "contents" : "axlUIViewFileCreate(${1:t_file} ${2:t_title} ${3:g_deleteFile} ${4:[lx_size]} ${5:[lt_placement]})" },
		{ "trigger" : "axlUIViewFileReuse" , "contents" : "axlUIViewFileReuse(${1:r_windowMsg} ${2:t_file} ${3:t_title} ${4:g_deleteFile})" },
		{ "trigger" : "axlUIViewFileScrollTo" , "contents" : "axlUIViewFileScrollTo(${1:r_windowMsg} ${2:x_line} ${3:/nil})" },
		{ "trigger" : "axlUIWBeep" , "contents" : "axlUIWBeep()" },
		{ "trigger" : "axlUIWBlock" , "contents" : "axlUIWBlock(${1:r_window})" },
		{ "trigger" : "axlUIWClose" , "contents" : "axlUIWClose(${1:r_window})" },
		{ "trigger" : "axlUIWClose" , "contents" : "axlUIWClose(${1:logWindow})" },	              
		{ "trigger" : "axlUIWCloseAll" , "contents" : "axlUIWCloseAll()" },
		{ "trigger" : "axlUIWExpose" , "contents" : "axlUIWExpose(${1:r_window/nil})" },
		{ "trigger" : "axlUIWExpose" , "contents" : "axlUIWExpose(${1:logWindow})" },	              
		{ "trigger" : "axlUIWExposeByName" , "contents" : "axlUIWExposeByName(${1:t_windowName})" },
		{ "trigger" : "axlUIWPerm" , "contents" : "axlUIWPerm(${1:r_window} ${2:[t/nil]})" },
		{ "trigger" : "axlUIWPerm" , "contents" : "axlUIWPerm(${1:handle} ${2:t})" },	             
		{ "trigger" : "axlUIWPrint" , "contents" : "axlUIWPrint(${1:r_window/nil} ${2:t_formatString} ${3:[g_arg1} ${4:...]})" },
		{ "trigger" : "axlUIWRedraw" , "contents" : "axlUIWRedraw(${1:r_window/nil})" },
		{ "trigger" : "axlUIWSetHelpTag" , "contents" : "axlUIWSetHelpTag(${1:r_window} ${2:t_tag})" },
		{ "trigger" : "axlUIWSetParent" , "contents" : "axlUIWSetParent(${1:o_childWindow} ${2:o_parentWindow/nil})" },
		{ "trigger" : "axlUIWShow" , "contents" : "axlUIWShow(${1:r_window/nil} ${2:s_option})" },
		{ "trigger" : "axlUIWTimerAdd" , "contents" : "axlUIWTimerAdd(${1:o_window} ${2:x_timeout} ${3:g_oneshot} ${4:u_callback})" },
		{ "trigger" : "axlUIWTimerRemoveSet" , "contents" : "axlUIWTimerRemoveSet(${1:o_timerId})" },
		{ "trigger" : "axlUIWUpdate" , "contents" : "axlUIWUpdate(${1:nil})" },	              
		{ "trigger" : "axlUIWUpdate" , "contents" : "axlUIWUpdate(${1:r_window/nil})" },
		{ "trigger" : "axlUIYesNo" , "contents" : "axlUIYesNo(${1:t_message} ${2:[t_title]} ${3:[s_default]})" },
		{ "trigger" : "axlUIYesNoCancel" , "contents" : "axlUIYesNoCancel(${1:t_message} ${2:[t_title]} ${3:[s_default]})" },
		{ "trigger" : "axlUnsetVariable" , "contents" : "axlUnsetVariable(${1:t_variable})" },
		{ "trigger" : "axlVersion" , "contents" : "axlVersion(${1:s_option})" },
		{ "trigger" : "axlVersion" , "contents" : "axlVersion()" },
		{ "trigger" : "axlVersionIdGet" , "contents" : "axlVersionIdGet()" },
		{ "trigger" : "axlVersionIdPrintd" , "contents" : "axlVersionIdPrintd(${1:x_time} ${2:/t_time})" },
		{ "trigger" : "axlViaZLength" , "contents" : "axlViaZLength(${1:t_layer1} ${2:t_layer2})" },
		{ "trigger" : "axlVisibileSet" , "contents" : "axlVisibileSet(${1:saveVis})" },	              
		{ "trigger" : "axlVisibleDesign" , "contents" : "axlVisibleDesign(${1:g_makeVis})" },
		{ "trigger" : "axlVisibleDesign" , "contents" : "axlVisibleDesign(${1:nil})" },	              
		{ "trigger" : "axlVisibleGet" , "contents" : "axlVisibleGet()" },
		{ "trigger" : "axlVisibleLayer" , "contents" : "axlVisibleLayer(${1:t_layer} ${2:g_makeVis})" },
		{ "trigger" : "axlVisibleSet" , "contents" : "axlVisibleSet(${1:l_visList})" },
		{ "trigger" : "axlVisibleSet" , "contents" : "axlVisibleSet(${1:p})" },	              
		{ "trigger" : "axlVisibleUpdate" , "contents" : "axlVisibleUpdate(${1:t})" },	              
		{ "trigger" : "axlVisibleUpdate" , "contents" : "axlVisibleUpdate(${1:nil})" },	              
		{ "trigger" : "axlVisibleUpdate" , "contents" : "axlVisibleUpdate(${1:t_now})" },
		{ "trigger" : "axlWFMAnyExported" , "contents" : "axlWFMAnyExported()" },
		{ "trigger" : "axlWidth2Impedance" , "contents" : "axlWidth2Impedance(${1:t_layer/x_layerNum} ${2:f_lineWidth})" },
		{ "trigger" : "axlWindowBoxGet" , "contents" : "axlWindowBoxGet()" },
		{ "trigger" : "axlWindowBoxSet" , "contents" : "axlWindowBoxSet(${1:l_bBox})" },
		{ "trigger" : "axlWindowFit" , "contents" : "axlWindowFit()" },
		{ "trigger" : "axlWriteDeviceFile" , "contents" : "axlWriteDeviceFile(${1:o_compDefDbid} ${2:[t_output_dir]})" },
		{ "trigger" : "axlWritePackageFile" , "contents" : "axlWritePackageFile(${1:o_symDefDbid} ${2:[t_output_dir]})" },
		{ "trigger" : "axlWritePackageFile" , "contents" : "axlWritePackageFile(${1:symDef})" },	              
		{ "trigger" : "axlZoomToDbid" , "contents" : "axlZoomToDbid(${1:o_dbid} ${2:/lo_dbid} ${3:g_always})" },
		// Virtuoso Design Environment SKILL Function
		//   Graphics Editor Functions
		//     Design Functions
		{ "trigger" : "geChangeCellView" , "contents" : "geChangeCellView(${1:[w_windowId]} ${2:[t_libName]} ${3:[t_cellName]} ${4:[t_viewName]} ${5:[t_accessMode]})" },
		{ "trigger" : "geChangeEditMode" , "contents" : "geChangeEditMode(${1:t_newMode} ${2:[w_windowId]})" },
		{ "trigger" : "geDiscardEdits" , "contents" : "geDiscardEdits(${1:[w_windowId]})" },
		{ "trigger" : "geNewWindow" , "contents" : "geNewWindow(${1:[w_windowId]})" },
		{ "trigger" : "geReturn" , "contents" : "geReturn(${1:[w_windowId]})" },
		{ "trigger" : "geReturnToLevel" , "contents" : "geReturnToLevel(${1:[w_windowId]})" },
		{ "trigger" : "geSave" , "contents" : "geSave(${1:[w_windowId]})" },
		{ "trigger" : "geSaveAs" , "contents" : "geSaveAs(${1:[w_windowId]} ${2:[t_libName]} ${3:[t_cellName]} ${4:[t_viewName]})" },
		{ "trigger" : "geSaveHier" , "contents" : "geSaveHier(${1:d_cellviewId} ${2:[x_depth]} ${3:[g_askForSave]})" },
		//     Automatic Menu Enabling SKILL Functions
		"geGetDisabledMenus",
		"geGetEnablePredicate",
		"geGetWindowStatus",
		"geSetEnablePredicate",
		"geSetWindowStatus",
		"geUpdateWindowMenus",
		//     Edit/Display Functions
		"geComputeQueryBbox",
		"geCopySelSet",
		"geDeleteSelSet",
		"geMenuForObjectsUnderPoint",
		"geSelectNextInSelSet",
		"geSelectPreviousInSelSet",
		"geSelectToggleObject",
		"geDispWinEnvProps",
		"geEditSelSet",
		"geEditSingleObject",
		"geEditToWindowPoint",
		"geEquivWindow",
		"geEquivWindowSet",
		"geFindPathToCellViewInst",
		"geGetSortedSelectByLine",
		"geGetCellViewWindow",
		"geGetEditCellView",
		"geGetEditCellViewWindow",
		"geGetEditRep",
		"geGetHierMemInst",
		"geGetInstHier",
		"geGetInstHierPath",
		"geGetObjectSelectedSet",
		"geGetTopLevelCellView",
		"geGetTopCellViewWindow",
		"geGetWindowBox",
		"geGetWindowCellView",
		"geGetWindowRep",
		"geIsGraphicalWindow",
		"geSetTCProbeDisplayStyle",
		"geTransparencyOptions",
		"geWindowToEditPoint",
		//     Refresh Functions
		"geRefresh",
		"geRefreshCellView",
		"geRefreshCellViews",
		"geRefreshWindow",
		"geRefreshWorldView",
		//     View Level Functions
		"geDeleteAllAreaViewLevel",
		"geDeleteAllInstViewLevel",
		"geDeleteAreaViewLevel",
		"geDeleteInstViewLevel",
		"geGetAllAreaViewLevel",
		"geGetAllInstViewLevel",
		"geGetAreaViewLevel",
		"geGetInstViewLevel",
		"geSetAreaViewLevel",
		"geSetInstViewLevel",
		"geRestoreWinView",
		"geSaveWinView",
		"geEditInPlace",
		"gePush",
		"geSwitch",
		"geCenter",
		"geGetScrollPercent",
		"geScroll",
		"geSetScrollPercent",
		"geShift",
		"geZoomToGrid",
		//     ...
		//   Database Access Functions
		{ "trigger" : "dbGetDatabaseType" , "contents" : "dbGetDatabaseType( )" },
		{ "trigger" : "dbIsId" , "contents" : "dbIsId( ${1:d_id} )" },
		{ "trigger" : "dbValidP" , "contents" : "dbValidP( ${1:d_id} )" },
		{ "trigger" : "dbobjectp" , "contents" : "dbobjectp( ${1:d_id} )" },
		//     Database Access Functions for Inherited Connections...
		"dbCreateSigNetExpr",
		"dbCreateTermNetExpr",
		"dbCVHasInheritedSig",
		"dbCVHasInheritedTerm",
		"dbCVHasNetSetProp",
		"dbDeleteSigNetExpr",
		"dbDeleteTermNetExpr",
		"dbFix",
		"edSig",
		"edTerm",
		"dbGetSigNetExpr",
		"dbGetTermNetExpr",
		"dbIsValidSigNetExpr",
		"dbIsValidTermNetExpr",
		"dbIsSigInherited",
		"dbIsTermInherited",
		"dbParseSigNetExpr",
		"dbParseTermNetExpr",
		"dbReplaceSigNetExpr",
		"dbReplaceTermNetExpr",
		//     Undo and Redo Functions...
		"dbSetUndoHandle",
		"dbUndoToHandle",
		"dbGetUndoHandles",
		"dbGetRedoHandles",
		"dbRedoToHandle",
		"dbEnableUndo",
		//     Pcell Freeze Functions
		{ "trigger" : "dbFreeze" , "contents" : "dbFreeze( ${1:d_topCellViewId} ${2:t_regLibName} ${3:t_pcellLibName} ${4:[ g_cleanUp ]})" },
		{ "trigger" : "dbIsFluidPcell" , "contents" : "dbIsFluidPcell( ${1:d_topCellViewId} )" },
		//     ...
		//     Shape Creation and Retrieval Functions
		{ "trigger" : "dbCopyShape" , "contents" : "dbCopyShape( ${1:d_shapeId} ${2:d_cellviewId} ${3:list(1:1 \"R0\" 1)} )" },
		{ "trigger" : "dbCreateLine" , "contents" : "dbCreateLine( ${1:d_cellView} ${2:tx_layer} ${3:l_points} )" },
		{ "trigger" : "dbCreatePath" , "contents" : "dbCreatePath( ${1:d_cellView} ${2:tx_layer} ${3:l_points} ${4:x_width} ${5:[t_pathStyle]} )" },
		{ "trigger" : "dbCreatePolygon" , "contents" : "dbCreatePolygon( ${1:d_cellView} ${2:tx_layer} ${3:l_points} )" },
		{ "trigger" : "dbCreateRect" , "contents" : "dbCreateRect( ${1:d_cellView} ${2:tx_layer} ${3:list(0:0 1:1)} )" },
		{ "trigger" : "dbCreateEllipse" , "contents" : "dbCreateEllipse( ${1:d_cellView} ${2:tx_layer} ${3:list(0:0 1:1)} )" },
		{ "trigger" : "dbCreateArc" , "contents" : "dbCreateArc( ${1:d_cellView} ${2:tx_layer} ${3:l_ellipse_bBox} ${4:l_arc_bBox} )" },
		{ "trigger" : "dbCreateDonut" , "contents" : "dbCreateDonut( ${1:d_cellView} ${2:tx_layer} ${3:l_points} ${4:x_outR} ${5:x_holeR})" },
		{ "trigger" : "dbCreateDot" , "contents" : "dbCreateDot( ${1:d_cellView} ${2:tx_layer} ${3:l_point} )" },
		{ "trigger" : "dbCreateLabel" , "contents" : "dbCreateLabel( ${1:d_cellView} ${2:tx_layer} ${3:l_point} ${4:t_label} ${5:t_just} ${6:t_orient} ${7:t_font} ${8:x_height})" },
		{ "trigger" : "dbCreateTextDisplay" , "contents" : "dbCreateTextDisplay( ${1:d_associateId} ${2:d_ownerId} ${3:tx_layer} ${4:l_displayFlags} ${5:l_point} ${6:t_just} ${7:t_orient} ${8:t_font} ${9:x_height} ${10:[ g_isDrafted [ g_isOverbar [ g_isVisible [ g_isNameVisible [ g_isValueVisible [ t_attrOrParamName [ g_isParamAssoc ] ] ] ] ] ] ]})" },
		{ "trigger" : "dbHasShape" , "contents" : "dbHasShape( ${1:d_cellView} )" },
		{ "trigger" : "dbMoveShape" , "contents" : "dbMoveShape( ${1:shapeId} ${2:d_cellView} ${3:[l_transform]} )" },
		{ "trigger" : "dbSetTextDisplayNameValueVisible" , "contents" : "dbSetTextDisplayNameValueVisible( ${1:d_tdId} ${2:g_isNameVisible} ${3:g_isValueVisible} )" },
		//    Shape Conversion Functions...
		"dbConvertArcToLine",
		"dbConvertDonutToPolygon",
		"dbConvertEllipseToPolygon",
		"dbConvertPathToPolygon",
		"dbConvertPathSegToPolygon",
		"dbConvertLineToPath",
		"dbConvertRectToPolygon",
		"dbCompressPointArray",
		//    Mosaic Creation and Retrieval Functions...
		"dbCreateParamSimpleMosaic",
		"dbCreateParamSimpleMosaicByMasterName",
		"dbCreateSimpleMosaic",
		"dbFindMosaicByName",
		//    Property Creation and Modification Functions...
		"dbCreateProp",
		"dbCreateRangeProp",
		"dbCreateEnumProp",
		"dbCreateHierProp",
		"dbFindProp",
		"dbGetPropByName",
		"dbReplaceProp",
		"dbReplaceRangeProp",
		"dbReplaceEnumProp",
		"dbReplaceHierProp",
		"dbCopyProp",
		"dbCopyPropList",
		"dbResetPropList",
		"dbDeletePropByName",
		"dbCopySingleProp",
		"dbMergeSingleProp",
		"dbReplacePropList",
		"dbSearchPropByName",
		//    Object Deletion Functions...
		"dbDeleteObject",
		//    Group Creation and Modification Functions....
		"dbAddObjectToGroup",
		"dbChangeGroupType",
		"dbCreateGroup",
		"dbDeleteGroupByName",
		"dbDeleteObjectFromGroup",
		"dbGetGroupByName",
		"dbGetGroupsWithDef",
		"dbMoveGroupMember",
		"dbDeleteGroupMemberFromGroup",
		//    Shape Transformation Functions...
		"dbTransformCellView",
		"dbTransformPoint",
		"dbTransformPointList",
		"dbTransformBBox",
		"dbConcatTransform",
		//    Bounding Box Functions
		{ "trigger" : "lowerLeft" , "contents" : "lowerLeft( ${1:l_bBox} )" },
		{ "trigger" : "upperRight" , "contents" : "upperRight( ${1:l_bBox} )" },
		{ "trigger" : "leftEdge" , "contents" : "leftEdge( ${1:d_object} )" },
		{ "trigger" : "rightEdge" , "contents" : "rightEdge( ${1:d_object} )" },
		{ "trigger" : "bottomEdge" , "contents" : "bottomEdge( ${1:d_object} )" },
		{ "trigger" : "topEdge" , "contents" : "topEdge( ${1:d_object} )" },
		{ "trigger" : "centerBox" , "contents" : "centerBox( ${1:l_bBox} )" },
		{ "trigger" : "isLocation" , "contents" : "isLocation( ${1:l_point} )" },
		{ "trigger" : "isBBox" , "contents" : "isBBox( ${1:l_bBox} )" },
		//    Property Bag Functions...
		"dbOpenBag",
		"dbReOpenBag",
		"dbGetBag",
		"dbGetBagOwner",
		"dbCloseBag",
		"dbPurgeBag",
		"dbRefreshBag",
		"dbMakeBagCurrent",
		"dbSaveBag",
		"dbIsBagReadable",
		"dbIsBagWritable",
		"dbGetBagTimeStamp",
		"dbFindOpenBag",
		"dbGetBagDdId",
		"dbGetOpenBags",
		"dbIsBagId",
		//    Layer Boolean Functions
		{ "trigger" : "dbLayerAnd" , "contents" : "dbLayerAnd( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[x_numVertices]} ${6:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerAndNot" , "contents" : "dbLayerAndNot( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[x_numVertices]} ${6:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerOr" , "contents" : "dbLayerOr( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:[l_dbIdList2]} ${5:[x_numVertices]} ${6:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerXor" , "contents" : "dbLayerXor( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[x_numVertices]} ${6:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerSize" , "contents" : "dbLayerSize( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:n_value} ${5:[x_numVertices]} ${6:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerTile" , "contents" : "dbLayerTile( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerStraddle" , "contents" : "dbLayerStraddle( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerNoHoles" , "contents" : "dbLayerNoHoles( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerHoles" , "contents" : "dbLayerHoles( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerInside" , "contents" : "dbLayerInside( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerOutside" , "contents" : "dbLayerOutside( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[g_mfgGrid]} )" },
		{ "trigger" : "dbLayerEnclose" , "contents" : "dbLayerEnclose( ${1:d_cellViewId} ${2:t_layerName} ${3:l_dbIdList1} ${4:l_dbIdList2} ${5:[g_mfgGrid]} )" },
		//  ......
		//  Cellview Input/Output Database Access Functions
		"dbAllCellViews",
		"dbCheckRecursion",
		"dbClose",
		"dbComputeBBox",
		"dbComputeBBoxNoNLP",
		"dbCopyCellView",
		"dbCreateLib",
		"dbGetLibDataCompressionLevel",
		"dbSetLibDataCompressionLevel",
		"dbUnsetLibDataCompressionLevel",
		"dbRefreshLibDataCompressionLevel",
		"dbDefineProc",
		"dbFindOpenCellView",
		"dbFlattenInst",
		"dbFlattenInst2",
		"dbFullLibPath",
		"dbFullPath",
		"dbGetAnyInstSwitchMaster",
		"dbGetCellViewDdId",
		"dbGetOpenCellViews",
		"dbOpenAutoSavedCellView",
		"dbOpenCellViewByType",
		"dbOpenHier",
		"dbOpenPanicCellView",
		"dbProduceMemName",
		"dbpurge",
		"dbReopen",
		"dbRegPostSaveTrigger",
		"dbRegPostSaveAsTrigger",
		"dbUnregPostSaveAsTrigger",
		"dbRegPurgeTrigger",
		"dbRegSaveTrigger",
		"dbRefreshCellView",
		"dbRenameNet",
		"dbSave",
		"dbSearchCDF",
		"dbSetAutoSave",
		"dbUndefineProc",
		"dbUnregPostSaveTrigger",
		"dbUnregPurgeTrigger",
		"dbUnregSaveTrigger",
		"dbWriteSkill",
		"dbWriteSkillWithLib",
		"dbIsNonSKILLPcell",
		//  Instance Creation and Retrieval Database Access Functions
		"dbCreateInst",
		"dbCreateParamInst",
		"dbCreateExtParamInst",
		"dbCreateExtParamInstByMasterName",
		"dbCreateXformPCell",
		"dbDumpPcDefinePcell",
		"dbCheckParamCell",
		"dbEvalParamCell",
		"dbFixParamCell",
		"dbHasInstance",
		"dbIsCellViewModified",
		"dbReplaceParam",
		"dbReplaceInstParamList",
		"dbFindAnyInstByName",
		"dbFindMemInstByName",
		"dbGetHierPathTransform",
		"dbGetInstByName",
		"dbGetInstanceByName",
		"dbGetInstNameNumInst",
		"dbGetInstTransform",
		"dbIsAnyInstBaseNameUsed",
		"dbCreateInstByMasterName",
		"dbCreateParamInstByMasterName",
		"dbDumpPcell",
		"dbDumpPcellWithLib",
		"dbCreateViaShapeArray",
		"dbSetInstHeaderMasterName",
		"dbIsSameMaster",
		"dbIsObjectBound",
		"dbGetCellViewSymmetry",
		"dbSetCellViewSymmetry",
		"dbGetCellViewEEQMaster",
		"dbSetCellViewEEQMaster",
		//  Connectivity Database Access Functions
		//  Connectivity Database Access Functions
		//  Pin Database Access Functions
		//  Placement Database Access Functions
		//  Topology Pattern Database Access Functions
		//  Figure Database Access Functions
		"dbCreateFigGroup",
		"dbAddFigToFigGroup",
		"dbRemoveFigFromFigGroup",
		"dbGetFigGroupByName",
		"dbCopyFig",
		"dbMoveFig",
		"dbGetOverlaps",
		"dbGetTrueOverlaps",
		"dbGetNeighbor",
		"dbGetNeighborList",
		"dbGetMaxHierDepth",
		"dbGetPathSegStyle",
		"dbSetPathSegStyle",
		"dbGetPathBoundary",
		"dbProduceOverlap",
		"dbProduceOverlapInst",
		//  Figure Set Database Access Functions
		//  Generator Database Access Functions
		//  Multi-Patterning Technology Database Access Functions (Advanced Nodes Only)
		//  Attribute Retrieval and Modification Database Access Functions
		"dbGetq",
		"dbGet",
		"dbSet",
		//  Design Management Functions
		//    Design Management Functions
		{ "trigger" : "ddAmUsingDM" , "contents" : "ddAmUsingDM( ${1:d_objId} )" },
		{ "trigger" : "ddAutoCheckin" , "contents" : "ddAutoCheckin( ${1:l_ddIds} ${2:[ g_isBatch( { t | nil } ) ]} )" },
		{ "trigger" : "ddAutoCheckout" , "contents" : "ddAutoCheckout( ${1:l_ddIds} ${2:[ g_isBatch( { t | nil } ) ]} )" },
		{ "trigger" : "ddAutoCtlGetVars" , "contents" : "ddAutoCtlGetVars( )" },
		"ddAutoCtlSetVars",
		"ddCatRefresh",
		"ddCheckin",
		"ddCheckout",
		"ddClearLibUnmanaged",
		"ddCreateLib",
		"ddDeleteObj",
		"ddDeleteLocal",
		"ddDumpLibList",
		"ddGetCoManagedSet",
		"ddGetForcedLib",
		"ddGetForcedLibEx",
		"ddGetLibList",
		"ddGetObj",
		"ddGetObjAccess",
		"ddGetObjAccessEx",
		"ddGetObjChildren",
		"ddGetObjChildrenEx",
		"ddGetObjDMSys",
		"ddGetObjFiles",
		"ddGetObjFilesEx",
		"ddGetObjGroup",
		"ddGetObjGroupEx",
		"ddGetObjLastModify",
		"ddGetObjLastModifyEx",
		"ddGetObjLib",
		"ddGetObjName",
		"ddGetObjOwner",
		"ddGetObjOwnerEx",
		"ddGetObjParent",
		"ddGetObjReadPath",
		"ddGetObjReadPathEx",
		"ddGetObjSize",
		"ddGetObjSizeEx",
		"ddGetObjType",
		"ddGetObjWritePath",
		"ddGetObjWritePathEx",
		"ddGetPathDMSys",
		"ddGetStartup",
		"ddGetTmpdirWarn",
		"ddGetTriggerList",
		"ddGetUpdatedLib",
		"ddIsId",
		"ddIsObjLibMarked",
		"ddIsObjReadable",
		"ddIsObjReadableEx",
		"ddIsObjWritable",
		"ddIsObjWritableEx",
		"ddIsPathManageable",
		"ddIsPathManaged",
		"ddLibIs5X",
		"ddLibHasTmpDir",
		"ddLockDescribe",
		"ddLockFree",
		"ddLockGetStatus",
		"ddLockPath",
		"ddLockSet",
		"ddLockSetEx",
		"ddMapGetDataTypeFileName",
		"ddMapGetDataTypeList",
		"ddMapGetFileDataType",
		"ddMapGetFileTool",
		"ddMapGetFileViewType",
		"ddMapGetToolNameDataType",
		"ddMapGetToolNameList",
		"ddMapGetToolNameViewType",
		"ddMapGetViewTypeFileName",
		"ddMapGetViewTypeList",
		"ddMapIsFileNameKnown",
		"ddMapIsToolLegal",
		"ddMapIsToolNameKnown",
		"ddMarkObjMaster",
		"ddNeedCheckout",
		"ddObjHasNamedObj",
		"ddObjHasNamedObjEx",
		"ddObjIsInMaster",
		"ddObjIsInTmp",
		"ddProduceObjRelNames",
		"ddProduceObjRelNamesEx",
		"ddRegTrigger",
		"ddReleaseObj",
		"ddSetForcedLib",
		"ddSetForcedLibEx",
		"ddSetLibUnmanaged",
		"ddSetLibDmType",
		"ddSetTmpdirWarn",
		"ddUnregTrigger",
		"ddUpdateLibList",
		//  Design Data Services
		"ciwAddTranslatorItem",
		"ciwCreateMenu",
		"ciwCreatePulldown",
		"ciwHiExit",
		"ciwMenuInit",
		"ciwMenuInstall",
		"ciwMenuLoadFile",
		"ciwRemoveTranslatorItem",
		"ddsAboutDFII",
		"ddsBrowserAction",
		"ddsCheckinPreferences",
		"ddsCheckoutPreferences",
		"ddsCheckSessionName",
		"ddsCloseLibManager",
		"ddsEditProp",
		"ddsEndSyncWithForm",
		"ddsFileBrowseCB",
		"ddsGetCurrentLib",
		"ddsGetCustomLibSelect",
		"ddsGetServiceName",
		"ddsHiCloseData",
		"ddsHiCreateLibrary",
		"ddsHiDefragCellView",
		"ddsHiDefragLib",
		"ddsHiMakeReadOnly",
		"ddsHiOpenCdsLibEditor",
		"ddsHiPreferences",
		"ddsHiRefresh",
		"ddsLEWhatsNewAtStartup",
		"ddsOnLineHelp",
		"ddsOpenConvertToolBox",
		"ddsOpenLibManager",
		"ddsProgramName",
		"ddsRefresh",
		"ddsRegCustomLibSelect",
		"ddsServSelect",
		"ddsSetLibManLCV",
		"ddsGetLibManLCV",
		"ddsSyncWithForm",
		"ddsUnregCustomLibSelect",
		"ddsUpdateSyncWithForm",
		"ddsViewDDProp",
		"ddsWhatsNew",
		//  dmb Compatibility Functions
		"dmbGetCurrentLib",
		"dmbLibBrowserFormDone",
		"dmbOpenLibBrowser",
		"dmbSetBrowserInteractions",
		"dmbSyncWithForm",
		"dmbSyncWithCellForm",
		"dmbUpdateBrowser",
		//  Cell Category Functions (ddCat Interface)
		"ddCatOpen",
		"ddCatOpenEx",
		"ddCatAddItem",
		"ddCatSubItem",
		"ddCatSave",
		"ddCatRemove",
		"ddCatClose",
		"ddCatGetCatName",
		"ddCatGetCatMembers",
		"ddCatGetLibCats",
		"ddCatFindCat",
		"ddCatGetCellsNotInCat",
		"ddCatIsObjInCat",
		// Old Cell Category Functions
		"dmAddCellToCategory",
		"dmCreateCellCategory",
		"dmRemoveCellCategory",
		"dmRemoveCellFromCategory",
		//  Design Editor SKILL Functions
		"deRegApp",
		"deUnRegApp",
		"deRegUserTriggers",
		"deUnRegUserTriggers",
		"deInheritEnabling",
		"deUnInheritEnabling",
		"deInheritMenus",
		"deUnInheritMenus",
		"deRegProbeTrigger",
		"deUnRegProbeTrigger",
		"deGetProbeTrigger",
		"deGetAppInfo",
		"deHiSetDefaultApplication",
		"deSetWorkspace",
		//  Registering DE Plugins
		"deRegPlugin",
		"deInstallPlugin",
		"deRemovePlugin",
		"deFindPlugin",
		"deFindAssistant",
		"deGetPlugins",
		"deGetAppClassInfo",
		"deoEnableTrigger",
		"deoExitTrigger",
		"deoGetAssistantList",
		"deoGetBindkeys",
		"deoMenuTrigger",
		"deoOnTabSwitch",
		"deoOnApplicationChange",
		"deoPostInstallTrigger",
		"deoRequireToolbars",
		"deoUpdateToolbar",
		"deoOnEvent",
		//  Client Interface
		"deFileNew",
		"deOpen",
		"deFileOpen",
		"deNew",
		"deNewCellView",
		"deOpenCellView",
		"deBack",
		"deForward",
		"dePush",
		"deSetHistoryOpenMode",
		"deSwap",
		"deToggleAssistants",
		"deToggleAssistantVisibility",
		"deToggleToolbars",
		"deFindToolbar",
		"deManageToolbar",
		"deCustomizeToolbars",
		"deUnmanageToolbar",
		"deEditInPlace",
		"deReturn",
		"deCopy",
		"dataTrigger",
		"appTrigger",
		"userAppTrigger",
		"enableTrigger",
		"menuTrigger",
		"userMenuTrigger",
		"postInstallTrigger",
		"userPostInstallTrigger",
		"probeTrigger",
		//  Design Editor Support Routines
		"deGetCellView",
		"deGetEditCellView",
		"deSetCellView",
		"deGetViewType",
		"deGetEditViewType",
		"deGetRootType",
		"deGetEditRootType",
		"deGetContext",
		"deGetEditContext",
		"deIsEditInContext",
		"deSetContext",
		"deGetMaxInContextLevel",
		"deGetConfigId",
		"deSetConfigId",
		"deGetVector",
		"deGetEIP",
		"deGetPushed",
		"deGetProbeContext",
		"deSetProbeContext",
		"deGetEditLevel",
		"deGetMaxEditLevel",
		"deEnableApp",
		"deDisableApp",
		"deInstallApp",
		"deGetAllApplicationNames",
		"deGetAllRootTypes",
		"deGetAllViewTypes",
		"deGetRootViewTypeList",
		"deMapUserTypeToViewType",
		"deMapViewTypeToUserType",
		"deViewTypeIsRegistered",
		"deGetLowerTierApp"
	]
}